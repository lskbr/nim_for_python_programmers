#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#: Nim-for-Python-Programmers.md:block 1 (header)
msgid "Table Of Contents"
msgstr "Índice"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Comparison](#Comparison)"
msgstr "[Comparação](#Comparison)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Objects](#Objects)"
msgstr "[Objetos](#Objects)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Do I have to know C?](#do-i-have-to-know-c)"
msgstr "[Eu tenho que conhecer C?](#do -eu tenho que saber-c)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Named Tuples](#named-tuple-1)"
msgstr "[Tuplas nomeadas](#named -tuple-1)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Variables](#Variables)"
msgstr "[Variáveis](#Variables)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[`self.__init__()`](#self__init__)"
msgstr "[`self.__init__()`](#self__init__)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Strings, F-Strings](#Strings)"
msgstr "[Strings, F-Strings](#Strings)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Lists](#Lists)"
msgstr "[Listas](#Lists)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Variable Naming](#variable-naming)"
msgstr "[Nomeando de variáveis](#variable -naming)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Consistent Spacing](#consistent-spacing)"
msgstr "[Espaçamento consistente](#consistent -spacing)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Scoping](#scoping)"
msgstr "[Escopo](#scoping)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Mutable arguments](#mutable-arguments)"
msgstr "[Argumentos mutáveis](#mutable -arguments)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Imports](#Imports)"
msgstr "[Imports](#Imports)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Ranges](#Ranges)"
msgstr "[Intervalos](#Ranges)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[String Operations](#string-ops)"
msgstr "[Operações com cadeias de caracteres](#string -ops)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[List Comprehensions](#List-Comprehensions)"
msgstr "[List Comprehensions](#List-Comprehensions)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[try/import/except](#tryimportexcept)"
msgstr "[try/import/except](#tryimportexcept)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Static Bounds Checks](#static-bounds-check)"
msgstr "[Verificações estática de limites](#static -bounds-check)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Null Coalescing](#null-coalescing)"
msgstr "[Coalescência nula](#null -coalescência)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[`with` Context Manager](#with-context-manager)"
msgstr "[`with` Gerenciador de Contextos](#with -context-manager)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Arrays](#Arrays)"
msgstr "[Matrizes](#Arrays)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Slices](#Slices)"
msgstr "[Fatias](#Slices)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Tuples](#Tuples)"
msgstr "[Tuplas](#Tuples)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Dict Comprehensions](#Dict-Comprehensions)"
msgstr "[Dict Compreensions](#Dict -Compreensões)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Set Comprehensions](#Set-Comprehensions)"
msgstr "[Set Comprehensions](#Set -Compreensões)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Reading and writing files](#Reading-and-writing-files)"
msgstr "[Lendo e gravando arquivos](#Reading -and-writing-files)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Decorators](#Decorators)"
msgstr "[Decoradores](#Decorators)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Lambdas](#Lambdas)"
msgstr "[Lambdas](#Lambdas)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Sets](#Sets)"
msgstr "[Conjuntos](#Sets)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[JSON](#JSON)"
msgstr "[JSON](#JSON)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Map & Filter](#map--filter)"
msgstr "[Map e filter](#map —filter)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Optional Indentation](#Optional-Indentation)"
msgstr "[Indentação opcional](#Optional -Indentação)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Dictionaries](#Dictionaries)"
msgstr "[Dicionários](#Dictionaries)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[CamelCase](#CamelCase)"
msgstr "[CamelCase](#CamelCase)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[DocStrings](#Docstrings)"
msgstr "[DocStrings](#Docstrings)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Import Nim files in Python](#Import-Nim-files-on-Python)"
msgstr "[Importar arquivos Nim em Python](#Import -Nim-files-on-Python)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Ternary operators](#Ternary-operators)"
msgstr "[Operadores ternários](#Ternary -operadores)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Unittests](#Unittests)"
msgstr "[Testes unitários](#Unittests)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[def Vs proc / func](#def-vs-procfunc)"
msgstr "[def x proc/func](#def -vs-procfunc)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Self-Execution of Main Module](#Self-Execution-of-Main-Module)"
msgstr "[Autoexecução do módulo principal](#Self -Execução do módulo principal)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Python Syntax for Nim](#Python-Syntax-for-Nim)"
msgstr "[Sintaxe Python para Nim](#Python -Syntax-for-NIM)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Publish to PYPI](#Publish-to-PYPI)"
msgstr "[Publicar no PYPI](#Publish para PYPI)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Silent Compilation](#Silent-Compilation)"
msgstr "[Compilação silenciosa](#Silent -Compilação)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Compiler Help](#Compiler-Help)"
msgstr "[Ajuda do compilador](#Compiler -Help)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Build Modes](#Build-Modes)"
msgstr "[Modos de construção](#Build -Modes)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Abstract Base Classes](#ABC)"
msgstr "[ABC - Classes básicas abstratas](#ABC)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid ""
"[WebAssembly](https://github.com/nim-lang/Nim/wiki/Nim-for-TypeScript-"
"Programmers#WebAssembly)"
msgstr ""
"[WebAssembly](https://github.com/nim-lang/Nim/wiki/Nim-for-TypeScript-"
"Programmers#WebAssembly)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Templates](#Templates)"
msgstr "[Modelos](#Templates)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Nim running Interpreted](https://nim-lang.org/docs/nims.html)"
msgstr "[Nim executando interpretado](https://nim-lang.org/docs/nims.html)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid ""
"[Nim on the browser](https://github.com/nim-lang/Nim/wiki/Nim-for-TypeScript-"
"Programmers#table-of-contents)"
msgstr ""
"[Nim no navegador](https://github.com/nim-lang/Nim/wiki/Nim-for-TypeScript-"
"Programmers#table-of-contents)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Standard Library Equivalents](#Standard-Library-Equivalents)"
msgstr "[Equivalentes da biblioteca padrão](#Standard-Library-Equivalents)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Async](#Async)"
msgstr "[Assíncrono](#Async)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid ""
"[Install Nim from PIP](https://github.com/juancarlospaco/choosenim_install#use)"
msgstr ""
"[Instale o Nim do PIP](https://github.com/juancarlospaco/choosenim_install#use)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Cheatsheet PDF](https://www.overleaf.com/read/svnxffsjvscy)"
msgstr ""
"[Folha de dicas em PDF](https://github.com/lskbr/nim_cheat_seat_pt_br/releases)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid ""
"[Arrow Functions](https://github.com/nim-lang/Nim/wiki/Nim-for-TypeScript-"
"Programmers#Arrow-Functions)"
msgstr ""
"[Funções Arrow](https://github.com/nim-lang/Nim/wiki/Nim-for-TypeScript-"
"Programmers#Arrow-Functions)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid ""
"[How to share variables between functions?](#How-to-share-variables-between-"
"functions)"
msgstr ""
"[Como compartilhar variáveis entre funções?](#How-to-share-variables-between-"
"functions)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Change File Permissions](#Change-File-Permissions)"
msgstr "[Alterar permissões do arquivo](#Change -File-Permissions)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Temporarily Change Folder](#Temporarily-Change-Folder)"
msgstr "[Alterar pasta temporariamente](#Temporarily -Change-Folder)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid ""
"[Pattern Matching](https://github.com/nim-lang/fusion/blob/master/src/fusion/"
"matching.rst)"
msgstr ""
"[Pattern Matching - Correspondência de padrões](https://github.com/nim-lang/"
"fusion/blob/master/src/fusion/matching.rst)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid ""
"[Best Practices](https://github.com/nim-lang/Nim/wiki/best-practices#best-"
"practices)"
msgstr ""
"[Melhores práticas](https://github.com/nim-lang/Nim/wiki/best-practices#best-"
"practices)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[In-Place Vs Out-Place](#in-Place-vs-out-place)"
msgstr "[No local versus fora do lugar](#in -Place-vs-Out-Place)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid ""
"[Run in NodeJS](https://github.com/nim-lang/Nim/wiki/Nim-for-TypeScript-"
"Programmers#nodejs-compatibility)"
msgstr ""
"[Executar no NodeJS](https://github.com/nim-lang/Nim/wiki/Nim-for-TypeScript-"
"Programmers#nodejs-compatibility)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Code Expansion](#run-time-code-expansion)"
msgstr "[Expansão de código](#run -time-code-expansion)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[Arduino, MicroPython, ESP32, FreeRTOS](#MicroPython)"
msgstr "[Arduino, MicroPython, ESP32, RTOS grátis](#MicroPython)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid "[LiveCoding, FoxDot, SuperCollider](#SuperCollider)"
msgstr "[Codificação ao vivo, FoxDot, SuperCollider](#SuperCollider)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid ""
"[PIP-installable Nim embedded inside Python](https://github.com/juancarlospaco/"
"nim4py#nim4python)"
msgstr ""
"[Nim instalável por PIP incorporado em Python](https://github.com/juancarlospaco/"
"nim4py#nim4python)"

#: Nim-for-Python-Programmers.md:block 2 (table)
msgid ""
"[Install Nim packages from PIP](https://github.com/juancarlospaco/"
"nimble_install#use)"
msgstr ""
"[Instale pacotes Nim do PIP](https://github.com/juancarlospaco/nimble_install#use)"

#: Nim-for-Python-Programmers.md:block 3 (unordered list)
msgid ""
"[English Version](https://github.com/nim-lang/Nim/wiki/Nim-for-Python-"
"Programmers#table-of-contents)"
msgstr ""
"[Versão em inglês](https://github.com/nim-lang/Nim/wiki/Nim-for-Python-"
"Programmers#table-of-contents)"

#: Nim-for-Python-Programmers.md:block 3 (unordered list)
msgid ""
"[Spanish Version](https://github.com/nim-lang/Nim/wiki/Nim-for-Python-Programmers-"
"ES#tabla-de-contenidos)"
msgstr ""
"[Versão em espanhol](https://github.com/nim-lang/Nim/wiki/Nim-for-Python-"
"Programmers-ES#tabla-de-contenidos)"

#: Nim-for-Python-Programmers.md:block 4 (header)
msgid "Comparison"
msgstr "Comparação"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Feature"
msgstr "Característica"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ":snake: Python"
msgstr ":snake: Python"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ":crown: Nim"
msgstr ":crown: Nim"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Execution model"
msgstr "Modelo de execução"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Virtual Machine (Interpreter)"
msgstr "Máquina virtual (interpretador)"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Machine code via C/C++ (Compiler)"
msgstr "Código de máquina via C/C++ (compilador)"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Written using"
msgstr "Escrito usando"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "C (CPython)"
msgstr "C (CPython)"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Nim"
msgstr "Nim"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "License"
msgstr "Licença"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Python Software Foundation License"
msgstr "Licença da Python Software Foundation"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "[MIT](https://tldrlegal.com/license/mit-license)"
msgstr "[MIT](https://tldrlegal.com/license/mit-license)"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Version (Major)"
msgstr "Versão (principal)"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "`3.x`"
msgstr "`3.x`"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "`1.x`"
msgstr "`1.x`"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Metaprogramming"
msgstr "Metaprogramação"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ""
":heavy_check_mark: metaclass, exec, eval, [ast](https://docs.python.org/3/library/"
"ast.html) (Run-time code expansion)"
msgstr ""
":heavy_check_mark: metaclass, exec, eval, [ast](https://docs.python.org/3/library/"
"ast.html) (expansão de código em tempo de execução)"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ""
":heavy_check_mark: [template, macros](https://nim-lang.github.io/Nim/manual."
"html#macros) (Compile-time code expansion)"
msgstr ""
":heavy_check_mark: [modelo, macros](https://nim-lang.github.io/Nim/manual."
"html#macros) (expansão do código em tempo de compilação)"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Memory management"
msgstr "Gerenciamento de memória"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Garbage collector"
msgstr "Coletor de lixo"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ""
"[Multi-paradigm memory management](https://nim-lang.github.io/Nim/gc.html) "
"(garbage collectors, [ARC/ORC](https://www.youtube.com/watch?v=aUJcYTnPWCg), "
"manual)"
msgstr ""
"[Gerenciamento de memória multiparadigma](https://nim-lang.github.io/Nim/gc.html) "
"(coletores de lixo, [ARC/ORC](https://www.youtube.com/watch?v=aUJcYTnPWCg), "
"manual)"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Typing"
msgstr "Tipagem"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Dynamic, Duck Typing"
msgstr "Dinâmica, Duck Typing"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Static"
msgstr "Estática"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Dependent types"
msgstr "Tipos dependentes"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ":negative_squared_cross_mark:"
msgstr ":negative_squared_cross_mark:"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ":heavy_check_mark: Partial support"
msgstr ":heavy_check_mark: Suporte parcial"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Generics"
msgstr "Genéricos"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Duck Typing"
msgstr "Duck Typing"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ":heavy_check_mark:"
msgstr ":heavy_check_mark:"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "int8/16/32/64 types"
msgstr ""
"tipos \n"
"int8/16/32/64"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "uint8/16/32/64 types"
msgstr "tipos uint8/16/32/64"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "float32/float64 types"
msgstr "tipos float32/float64"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Char types"
msgstr "Tipos de caractere"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Subrange types"
msgstr "Tipos de subfaixa"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Enum types"
msgstr "Tipos de enum"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Bigints (arbitrary size)"
msgstr "Bigints (tamanho arbitrário)"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ""
":heavy_check_mark: [jsbigints](https://nim-lang.github.io/Nim/jsbigints.html), "
"[#14696](https://github.com/nim-lang/Nim/issues/14696#issue-640117621)"
msgstr ""
":heavy_check_mark: [jsbigints](https://nim-lang.github.io/Nim/jsbigints.html), "
"[#14696](https://github.com/nim-lang/Nim/issues/14696#issue-640117621)"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Biggest built-in integer"
msgstr "Maior número inteiro embutido"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Unknown, limited by free memory"
msgstr "Desconhecido, limitado pela memória livre"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "`18_446_744_073_709_551_615` for `uint64` type"
msgstr "`18_446_744_073_709_551_615` para o tipo `uint64`"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Arrays"
msgstr "Matrizes"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Type inference"
msgstr "Inferência de tipo"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Duck typing"
msgstr "Duck typing"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Closures"
msgstr "Closures"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Operator overloading"
msgstr "Sobrecarga do operador"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ":heavy_check_mark: on any type"
msgstr ":heavy_check_mark: em qualquer tipo"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Custom operators"
msgstr "Operadores personalizados"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Object-Oriented"
msgstr "Orientado a objetos"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Methods"
msgstr "Métodos"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Exceptions"
msgstr "Exceções"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Anonymous functions"
msgstr "Funções anônimas"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ":heavy_check_mark: multi-line, single-expression"
msgstr ":heavy_check_mark: várias linhas, expressão única"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ":heavy_check_mark: multi-line, multi-expression"
msgstr ":heavy_check_mark: várias linhas, várias expressões"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "List comprehensions"
msgstr "List comprehensions"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Dict comprehensions"
msgstr "Dict comprehensions"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Set comprehensions"
msgstr "Set comprehensions"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Custom object comprehensions"
msgstr "Compreensões personalizadas de objetos"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ":heavy_check_mark: generator expression"
msgstr ":heavy_check_mark: expressão geradora"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Pattern Matching builtin"
msgstr "Pattern Matching embutido"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ":heavy_check_mark: As of Python 3.10"
msgstr ":heavy_check_mark: A partir do Python 3.10"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Immutability of types"
msgstr "Imutabilidade dos tipos"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Basic types (number, string, bool), tuple, frozenset"
msgstr "Tipos básicos (número, string, bool), tuple, frozenset"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Immutability of variables"
msgstr "Imutabilidade das variáveis"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Function arguments immutability"
msgstr "Imutabilidade dos argumentos da função"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Depending on type"
msgstr "Dependendo do tipo"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Immutable"
msgstr "Imutável"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Formatted string literals"
msgstr "Literais de string formatados"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ":heavy_check_mark: f-strings"
msgstr ":heavy_check_mark: f-strings"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ""
":heavy_check_mark: [strformat](https://nim-lang.github.io/Nim/strformat.html)"
msgstr ""
":heavy_check_mark: [strformat](https://nim-lang.github.io/Nim/strformat.html)"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "FFI"
msgstr "FFI"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ":heavy_check_mark: ctypes, C extension API (Cython via pip)"
msgstr ":heavy_check_mark: ctypes, API de extensão C (Cython via pip)"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ":heavy_check_mark: C, C++, Objective C, JS (depending on used backend)"
msgstr ":heavy_check_mark: C, C++, Objective C, JS (dependendo do backend usado)"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Async"
msgstr "Assíncrono"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Threads"
msgstr "Tópicos"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ":heavy_check_mark: Global Interpreter Lock"
msgstr ":heavy_check_mark: GIL - Bloqueio de intérprete global"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Regex"
msgstr "Regex"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ":heavy_check_mark: Perl-compatible"
msgstr ":heavy_check_mark: compatível com Perl"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Documentation comments"
msgstr "Comentários da documentação"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ""
":heavy_check_mark: plain-text multi-line strings (reStructuredText via Sphinx)"
msgstr ""
":heavy_check_mark: cadeias de texto simples com várias linhas (reStructuredText "
"via Sphinx)"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ""
":heavy_check_mark: [ReStructuredText/Markdown](https://nim-lang.github.io/Nim/rst."
"html)"
msgstr ""
":heavy_check_mark: [reStructuredText/Markdown](https://nim-lang.github.io/Nim/rst."
"html)"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Package publishing"
msgstr "Publicação de pacotes"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ":heavy_check_mark: not built-in, requires `twine`"
msgstr ":heavy_check_mark: não embutido, requer `twine`"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ":heavy_check_mark: built-in, `nimble`"
msgstr ":heavy_check_mark: embutido, `nimble`"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Package manager"
msgstr "Gerenciador de pacotes"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ":heavy_check_mark: `pip`"
msgstr ":heavy_check_mark: `pip`"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ":heavy_check_mark: `nimble`"
msgstr ":heavy_check_mark: `nimble`"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Code autoformatter"
msgstr "Formatador automático de código"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ":heavy_check_mark: `black` and others via pip"
msgstr ":heavy_check_mark: `black` e outros via pip"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ""
":heavy_check_mark: `nimpretty` built-in, [nimlint](https://github.com/nim-dev/"
"nimlint)"
msgstr ""
":heavy_check_mark: `nimpretty` embutido, [nimlint](https://github.com/nim-dev/"
"nimlint)"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "File extensions"
msgstr "Extensões de arquivo"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ".py, .pyw, .pyc, .pyd, .so"
msgstr ".py, .pyw, .pyc, .pyd, .so"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ".nim, .nims"
msgstr ".nim, .nims"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Temporary intermediate representation (IR) format"
msgstr "Formato de representação intermediária temporária (IR)"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ".pyc (CPython VM bytecode)"
msgstr ".pyc (código de bytes da VM do CPython)"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "C, C++, Objective C (LLVM IR via nlvm)"
msgstr "C, C++, Objective C (LLVM IR via nlvm)"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Uses #!shebang on files"
msgstr "Usa #! shebang em arquivos"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ":heavy_check_mark: `nimr`, `nimcr`"
msgstr ":heavy_check_mark: `nimr`, `nimcr`"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "REPL"
msgstr "REPL"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid ""
"[inim](https://github.com/inim-repl/INim#inim-interactive-nim-shell--), "
"[Nim4Colab](https://github.com/demotomohiro/nim4colab)"
msgstr ""
"[inim](https://github.com/inim-repl/INim#inim-interactive-nim-shell —), "
"[Nim4Colab](https://github.com/demotomohiro/nim4colab)"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Indentation"
msgstr "Indentação"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Tabs and spaces, uniform per code block, 4 spaces by convention"
msgstr ""
"Tabulações e espaços, uniformes por bloco de código, 4 espaços por convenção"

#: Nim-for-Python-Programmers.md:block 5 (table)
msgid "Spaces only, uniform per code block, 2 spaces by convention"
msgstr "Somente espaços, uniforme por bloco de código, 2 espaços por convenção"

#: Nim-for-Python-Programmers.md:block 6 (paragraph)
msgid "Notes:"
msgstr "Notas:"

#: Nim-for-Python-Programmers.md:block 7 (unordered list)
msgid ""
"Python anonymous function (lambdas) are known to be slow compared to normal "
"functions."
msgstr ""
"Sabe-se que as funções anônimas do Python (lambdas) são lentas em comparação com "
"as funções normais."

#: Nim-for-Python-Programmers.md:block 7 (unordered list)
msgid ""
"Python Regex claims to be PCRE compatible, but in practice PCRE Regexes may not "
"work."
msgstr ""
"O Python Regex afirma ser compatível com PCRE, mas na prática os PCRE Regexes "
"podem não funcionar."

#: Nim-for-Python-Programmers.md:block 7 (unordered list)
msgid ""
"Python \"multi-line\" anonymous functions may require using `;` and Linters/IDE "
"may complain about it."
msgstr ""
"As funções anônimas “de várias linhas” do Python podem exigir o uso de `;` e o "
"Linters/IDE pode reclamar disso."

#: Nim-for-Python-Programmers.md:block 8 (header)
msgid "Variables"
msgstr "Variáveis"

#: Nim-for-Python-Programmers.md:block 9 (paragraph)
msgid ""
"Creating a new variable uses `var` or `let` or `const`. Nim has immutability and "
"compile-time function execution. You can assign functions to variables."
msgstr ""
"A criação de uma nova variável usa `var` ou `let` ou `const`. Nim tem "
"imutabilidade e execução de funções em tempo de compilação. Você pode atribuir "
"funções às variáveis."

#: Nim-for-Python-Programmers.md:block 10 (table)
msgid "`const`"
msgstr "`const`"

#: Nim-for-Python-Programmers.md:block 10 (table)
msgid "`let`"
msgstr "`let`"

#: Nim-for-Python-Programmers.md:block 10 (table)
msgid "`var`"
msgstr "`var`"

#: Nim-for-Python-Programmers.md:block 10 (table)
msgid "Run-Time"
msgstr "Tempo de execução"

#: Nim-for-Python-Programmers.md:block 10 (table)
msgid "NO"
msgstr "NÃO"

#: Nim-for-Python-Programmers.md:block 10 (table)
msgid ":heavy_check_mark: YES"
msgstr ":heavy_check_mark: SIM"

#: Nim-for-Python-Programmers.md:block 10 (table)
msgid "Compile-Time"
msgstr "Tempo de compilação"

#: Nim-for-Python-Programmers.md:block 10 (table)
#, fuzzy
msgid "AutoInitialized"
msgstr "Inicializado automaticamente"

#: Nim-for-Python-Programmers.md:block 10 (table)
msgid "Reassignable"
msgstr "Reatribuível"

#: Nim-for-Python-Programmers.md:block 10 (table)
msgid "Requires Assignment"
msgstr "Requer atribuição"

#: Nim-for-Python-Programmers.md:block 10 (table)
msgid "Can be Global"
msgstr "Pode ser global"

#: Nim-for-Python-Programmers.md:block 11 (paragraph)
msgid ""
"[For advanced users, it is possible to skip variable Auto-Initialization.]"
"(https://nim-lang.github.io/Nim/manual.html#statements-and-expressions-var-"
"statement)"
msgstr ""
"[Para usuários avançados, é possível ignorar a inicialização automática de "
"variáveis.](https://nim-lang.github.io/Nim/manual.html#statements-and-expressions-"
"var-statement)"

#: Nim-for-Python-Programmers.md:block 12 (header)
msgid "Variable Naming"
msgstr "Nomeação de variáveis"

#: Nim-for-Python-Programmers.md:block 13 (paragraph)
msgid ""
"Variables can be multi-line without \"escaping\" them or using parentheses. This "
"is useful for long lines and long ternary operators. Minimal example:"
msgstr ""
"As variáveis podem ter várias linhas sem “escapar” delas ou usar parênteses. Isso "
"é útil para linhas longas e operadores ternários longos. Exemplo mínimo:"

#: Nim-for-Python-Programmers.md:block 15 (paragraph)
msgid ""
":arrow_up: Python :arrow_up: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :"
"arrow_down: Nim :arrow_down:"
msgstr ""
":arrow_up: Python :arrow_up: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :"
"arrow_down: Nim :arrow_down:"

#: Nim-for-Python-Programmers.md:block 17 (paragraph)
msgid "This works with function calls too:"
msgstr "Isso também funciona com chamadas de função:"

#: Nim-for-Python-Programmers.md:block 19 (paragraph)
msgid "You can use underscores, new lines, and whitespace in variable names:"
msgstr ""
"Você pode usar sublinhados, novas linhas (new lines) e espaços em branco nos "
"nomes das variáveis:"

#: Nim-for-Python-Programmers.md:block 21 (paragraph)
msgid ""
"[You can use reserved keywords as variable names.](https://nim-lang.github.io/Nim/"
"manual.html#lexical-analysis-stropping)"
msgstr ""
"[Você pode usar palavras-chave reservadas como nomes de variáveis.](https://nim-"
"lang.github.io/Nim/manual.html#lexical-analysis-stropping)"

#: Nim-for-Python-Programmers.md:block 22 (paragraph)
msgid ""
"It's okay to use `var` while learning Nim or for quick prototyping, although it's "
"much better to learn the difference between different variable declarations."
msgstr ""
"Não há problema em usar `var` enquanto aprende Nim ou para prototipagem rápida, "
"embora seja muito melhor aprender a diferença entre diferentes declarações de "
"variáveis."

#: Nim-for-Python-Programmers.md:block 23 (header)
msgid "Consistent Spacing"
msgstr "Espaçamento consistente"

#: Nim-for-Python-Programmers.md:block 24 (paragraph)
msgid "Spaces must be consistent on your code, mainly around operators:"
msgstr ""
"Os espaços devem ser consistentes em seu código, principalmente em torno dos "
"operadores:"

#: Nim-for-Python-Programmers.md:block 26 (paragraph)
msgid "Bad inconsistent spaces:"
msgstr "Espaços inconsistentes incorretos:"

#: Nim-for-Python-Programmers.md:block 28 (paragraph)
msgid "Omitting spaces on your code has no effect on performance."
msgstr "Omitir espaços em seu código não afeta o desempenho."

#: Nim-for-Python-Programmers.md:block 29 (paragraph)
msgid "All operators are functions in Nim."
msgstr "Todos os operadores são funções no Nim."

#: Nim-for-Python-Programmers.md:block 30 (header)
msgid "Scoping"
msgstr "Escopo"

#: Nim-for-Python-Programmers.md:block 31 (unordered list)
msgid "Scope \"leaks\", \"bugs\", \"glitches\", etc."
msgstr "Escopo: “vazamentos”, “bugs”, “falhas”, etc."

#: Nim-for-Python-Programmers.md:block 33 (paragraph)
msgid "Output:"
msgstr "Saída:"

#: Nim-for-Python-Programmers.md:block 39 (paragraph)
msgid ""
"Note that in the example above we use a simple `int`, so the problem may not seem "
"severe. But if `x` were a few gigabytes of RAM in size, it would \"leak\" out of "
"the `for` loop to the rest of the outer or main scope instead of being reclaimed. "
"Nim avoids this problem."
msgstr ""
"Observe que, no exemplo acima, usamos um simples `int`, então o problema pode não "
"parecer grave. Mas se `x` tivesse alguns gigabytes de RAM, ele “vazaria” do loop "
"`for` para o resto do escopo externo ou principal, em vez de ser recuperado. Nim "
"evita esse problema."

#: Nim-for-Python-Programmers.md:block 40 (paragraph)
msgid "Another example:"
msgstr "Outro exemplo:"

#: Nim-for-Python-Programmers.md:block 48 (header)
msgid "Boolean conditionals"
msgstr "Condicionais booleanos"

#: Nim-for-Python-Programmers.md:block 49 (unordered list)
msgid "Boolean comparisons \"bugs\", \"glitches\", etc."
msgstr "Comparações booleanas “bugs”, “falhas”, etc."

#: Nim-for-Python-Programmers.md:block 51 (paragraph)
msgid "Fails with the error:"
msgstr "Falha com o erro:"

#: Nim-for-Python-Programmers.md:block 54 (paragraph)
msgid ""
"The Nim example compiles and runs without incident; the operator precedence is "
"resolved correctly:"
msgstr ""
"O exemplo do Nim é compilado e executado sem incidentes; a precedência do "
"operador é resolvida corretamente:"

#: Nim-for-Python-Programmers.md:block 58 (paragraph)
msgid ""
"This runs because `bool` is a subtype of `int` in Python, so it supports the same "
"mathematical operations. In Nim this is not the case:"
msgstr ""
"Isso é executado porque `bool` é um subtipo de `int` em Python, portanto, ele "
"suporta as mesmas operações matemáticas. Em Nim, esse não é o caso:"

#: Nim-for-Python-Programmers.md:block 61 (paragraph)
msgid "Does not Compile:"
msgstr "Não compila:"

#: Nim-for-Python-Programmers.md:block 63 (header)
msgid "block"
msgstr "bloco"

#: Nim-for-Python-Programmers.md:block 64 (paragraph)
msgid ""
"`block` explicitly creates a new scope, without the overhead of a function. It "
"can have a \"name\" without the name polluting the local namespace, and can be "
"interrupted anywhere without requiring `return`."
msgstr ""
"`block` cria explicitamente um novo escopo, sem a sobrecarga de uma função. Ele "
"pode ter um “nome” sem que o nome polua o namespace local e pode ser interrompido "
"em qualquer lugar sem exigir `retornar`."

#: Nim-for-Python-Programmers.md:block 65 (paragraph)
msgid "`block` can be used with `var`, `let` and `const` too."
msgstr "`block` também pode ser usado com `var`, `let` e `const`."

#: Nim-for-Python-Programmers.md:block 66 (paragraph)
msgid ""
"Imagine that you need to get out of a nested `if`, without executing any other "
"code from other `if` and `else` blocks. You can do:"
msgstr ""
"Imagine que você precise sair de um `if` aninhado, sem executar nenhum outro "
"código de outros blocos `if` e `else`. Você pode fazer:"

#: Nim-for-Python-Programmers.md:block 70 (unordered list)
msgid ""
"https://nim-lang.github.io/Nim/manual.html#statements-and-expressions-block-"
"statement"
msgstr ""
"https://nim-lang.github.io/Nim/manual.html#statements-and-expressions-block-"
"statement"

#: Nim-for-Python-Programmers.md:block 70 (unordered list)
msgid ""
"https://nim-lang.github.io/Nim/manual.html#statements-and-expressions-block-"
"expression"
msgstr ""
"https://nim-lang.github.io/Nim/manual.html#statements-and-expressions-block-"
"expression"

#: Nim-for-Python-Programmers.md:block 71 (header)
msgid "Mutable arguments"
msgstr "Argumentos mutáveis"

#: Nim-for-Python-Programmers.md:block 79 (header)
msgid "Imports"
msgstr "Importações"

#: Nim-for-Python-Programmers.md:block 80 (table)
msgid "Import"
msgstr "Importar"

#: Nim-for-Python-Programmers.md:block 80 (table)
#, fuzzy
msgid "Only one symbol, use unqualified"
msgstr "Apenas um símbolo, use não qualificado"

#: Nim-for-Python-Programmers.md:block 80 (table)
msgid "`from math import sin`"
msgstr "`from math import sin`"

#: Nim-for-Python-Programmers.md:block 80 (table)
msgid "`from std/math import sin`"
msgstr "`from std/math import sin`"

#: Nim-for-Python-Programmers.md:block 80 (table)
#, fuzzy
msgid "All symbols, use unqualified"
msgstr "Todos os símbolos, use sem qualificação"

#: Nim-for-Python-Programmers.md:block 80 (table)
msgid "`from math import *`"
msgstr "`from math import *`"

#: Nim-for-Python-Programmers.md:block 80 (table)
msgid "**`import std/math` (recommended)**"
msgstr "**`import std/math` (recomendado) **"

#: Nim-for-Python-Programmers.md:block 80 (table)
#, fuzzy
msgid "All symbols, use fully qualified"
msgstr "Todos os símbolos, use totalmente qualificados"

#: Nim-for-Python-Programmers.md:block 80 (table)
msgid "**`import math` (recommended)**"
msgstr "**`import math` (recomendado) **"

#: Nim-for-Python-Programmers.md:block 80 (table)
msgid "`from std/math import nil`"
msgstr "`from std/math import nil`"

#: Nim-for-Python-Programmers.md:block 80 (table)
msgid "\"import as\" another name"
msgstr "“importar as” outro nome"

#: Nim-for-Python-Programmers.md:block 80 (table)
msgid "`import math as potato`"
msgstr "`import math as batata`"

#: Nim-for-Python-Programmers.md:block 80 (table)
msgid "`import std/math as potato`"
msgstr "`import std/math as batata`"

#: Nim-for-Python-Programmers.md:block 80 (table)
msgid "Both of the above at the same time"
msgstr "Ambos os itens acima ao mesmo tempo"

#: Nim-for-Python-Programmers.md:block 80 (table)
msgid "`from std/math as m import nil`"
msgstr "`from std/math as m import nil`"

#: Nim-for-Python-Programmers.md:block 80 (table)
#, fuzzy
msgid "All symbols except one, use unqualified"
msgstr "Todos os símbolos, exceto um, usam sem qualificação"

#: Nim-for-Python-Programmers.md:block 80 (table)
msgid "`import std/math except sin`"
msgstr "`import std/math except sin`"

#: Nim-for-Python-Programmers.md:block 80 (table)
msgid "All symbols except several, use unqualified"
msgstr "Todos os símbolos, exceto vários, usam sem qualificação"

#: Nim-for-Python-Programmers.md:block 80 (table)
msgid "`import std/math except sin, tan, PI`"
msgstr "`import std/math except sin, tan, PI`"

#: Nim-for-Python-Programmers.md:block 80 (table)
msgid "Include another module in this module"
msgstr "Incluir outro módulo neste módulo"

#: Nim-for-Python-Programmers.md:block 80 (table)
#, fuzzy
msgid "`include somemodule`"
msgstr "`incluir algum módulo`"

#: Nim-for-Python-Programmers.md:block 81 (paragraph)
msgid ""
"**Your modules and types are not going to collide!, even if you have types named "
"like modules, just chill and keep coding...**"
msgstr ""
"**Seus módulos e tipos não vão colidir! , mesmo que você tenha tipos chamados de "
"módulos, relaxe e continue codificando... **"

#: Nim-for-Python-Programmers.md:block 82 (paragraph)
msgid ""
"In Nim, `import std/math` imports all of the symbols from the `math` module "
"(`sin`, `cos`, etc) so that they can be used unqualified. The Python equivalent "
"is `from math import *`."
msgstr ""
"No Nim, `import std/math` importa todos os símbolos do módulo `math` (`sin`, "
"`cos`, etc) para que eles possam ser usados sem qualificação. O equivalente em "
"Python é `from math import *`."

#: Nim-for-Python-Programmers.md:block 83 (paragraph)
msgid ""
"If you prefer to not import all the symbols, and always use qualified names "
"instead, the Nim code is `from std/math import nil`. Then you can call `math."
"sin()`, `math.cos()`, etc. The Python equivalent is `import math`."
msgstr ""
"Se você preferir não importar todos os símbolos e sempre usar nomes qualificados, "
"o código Nim é `from std/math import nil`. Então você pode chamar `math.sin () `, "
"`math.cos ()`, etc. O equivalente em Python é `import math`."

#: Nim-for-Python-Programmers.md:block 84 (paragraph)
msgid ""
"It is generally safe to import all names in Nim because the compiler will not "
"actually compile any unused functions (so there's no overhead). Furthermore, "
"since Nim is statically typed, it can usually distinguish between the two "
"imported functions with the same names based on the types of the arguments they "
"are called with. In the rare cases where the types are the same, you can still "
"fully qualify the name to disambiguate."
msgstr ""
"Geralmente, é seguro importar todos os nomes no Nim porque o compilador não "
"compilará nenhuma função não utilizada (portanto, não há sobrecarga). Além disso, "
"como o Nim é estaticamente tipado, ele geralmente pode distinguir entre as duas "
"funções importadas com os mesmos nomes com base nos tipos de argumentos com os "
"quais são chamadas. Nos raros casos em que os tipos são iguais, você ainda pode "
"qualificar totalmente o nome para desambiguar."

#: Nim-for-Python-Programmers.md:block 85 (paragraph)
msgid ""
"The prefix `std/` enforces that the module is imported from the standard library. "
"If a Nimble package has a module with the same name, the compiler can resolve the "
"ambiguity and it is explicit in the code."
msgstr ""
"O prefixo `std/` impõe que o módulo seja importado da biblioteca padrão. Se um "
"pacote Nimble tiver um módulo com o mesmo nome, o compilador pode resolver a "
"ambiguidade e isso está explícito no código."

#: Nim-for-Python-Programmers.md:block 86 (paragraph)
msgid "Local modules and Nimble modules do not need `std/` prefix."
msgstr "Módulos locais e módulos Nimble não precisam do prefixo `std/`."

#: Nim-for-Python-Programmers.md:block 87 (paragraph)
msgid "Python and Nim share these import statements:"
msgstr "Python e Nim compartilham essas declarações de importação:"

#: Nim-for-Python-Programmers.md:block 89 (paragraph)
msgid "Alternative syntaxes:"
msgstr "Sintaxes alternativas:"

#: Nim-for-Python-Programmers.md:block 92 (paragraph)
msgid ""
"The variant with one `import` statement per line is common in Python and Nim, but "
"in Nim the form `import foo, bar, baz` is also seen often."
msgstr ""
"A variante com uma instrução `import` por linha é comum em Python e Nim, mas em "
"Nim a forma `import foo, bar, baz` também é vista com frequência."

#: Nim-for-Python-Programmers.md:block 93 (paragraph)
msgid "More examples:"
msgstr "Mais exemplos:"

#: Nim-for-Python-Programmers.md:block 95 (header)
msgid "Programatically"
msgstr "Programaticamente"

#: Nim-for-Python-Programmers.md:block 99 (header)
msgid "Code without imports"
msgstr "Código sem importações"

#: Nim-for-Python-Programmers.md:block 100 (paragraph)
msgid ""
"Sometimes in the wild you may see code samples or files **without** the imports "
"but they somehow work anyway. The reason is that Nim can use `import` from the "
"compile command, or from a `.nims` file:"
msgstr ""
"Às vezes, na natureza, você pode ver exemplos de código ou arquivos **sem** as "
"importações, mas eles de alguma forma funcionam de qualquer maneira. O motivo é "
"que Nim pode usar `import` do comando compile ou de um arquivo `.nims`:"

#: Nim-for-Python-Programmers.md:block 101 (unordered list)
msgid "`nim c --import:sugar file.nim`"
msgstr "`nim c --import:sugar file.nim`"

#: Nim-for-Python-Programmers.md:block 101 (unordered list)
msgid "`nim c --import:folder/mymodule file.nim`"
msgstr "`nim c --import:folder/mymodule file.nim`"

#: Nim-for-Python-Programmers.md:block 101 (unordered list)
msgid "`nim js --import:strutils --include:mymodule file.nim`"
msgstr "`nim js --import:strutils --include:mymodule file.nim`"

#: Nim-for-Python-Programmers.md:block 102 (paragraph)
msgid ""
"Sometimes projects or quick code examples use this to save some typing. Thanks to "
"Dead Code Elimination, if the imported symbols are not used they will not exist "
"on the compiled output."
msgstr ""
"Às vezes, projetos ou exemplos de código rápido usam isso para evitar a "
"digitação. Graças ao Dead Code Elimination (Eliminação de código morto), se os "
"símbolos importados não forem usados, eles não existirão na saída compilada."

#: Nim-for-Python-Programmers.md:block 103 (paragraph)
msgid "See also:"
msgstr "Veja também:"

#: Nim-for-Python-Programmers.md:block 104 (unordered list)
msgid ""
"[Nim Command line switches](https://nim-lang.github.io/Nim/nimc.html#compiler-"
"usage-command-line-switches)"
msgstr ""
"[Interruptores de linha de comando Nim](https://nim-lang.github.io/Nim/nimc."
"html#compiler-usage-command-line-switches)"

#: Nim-for-Python-Programmers.md:block 105 (header)
msgid "Prelude"
msgstr "Prelúdio"

#: Nim-for-Python-Programmers.md:block 106 (paragraph)
msgid ""
"Sometimes you may feel that Python has more symbols available by default without "
"any `import` compared to Nim. To get a similar experience of having the basic "
"data structures and most common imports ready so you can get coding right away, "
"you can use [prelude](https://nim-lang.github.io/Nim/prelude.html):"
msgstr ""
"Às vezes, você pode achar que o Python tem mais símbolos disponíveis por padrão "
"sem qualquer `importação` em comparação com o Nim. Para ter uma experiência "
"semelhante de ter as estruturas básicas de dados e as importações mais comuns "
"prontas para que você possa começar a codificar imediatamente, você pode usar "
"[prelude](https://nim-lang.github.io/Nim/prelude.html):"

#: Nim-for-Python-Programmers.md:block 108 (paragraph)
msgid ""
"[prelude](https://nim-lang.github.io/Nim/prelude.html) is an [`include` file]"
"(https://nim-lang.github.io/Nim/manual.html#modules-include-statement) that "
"simply imports common modules for your convenience, to save some typing. [prelude]"
"(https://nim-lang.github.io/Nim/prelude.html) works for JavaScript target too."
msgstr ""
"[prelude](https://nim-lang.github.io/Nim/prelude.html) é um arquivo [`include`]"
"(https://nim-lang.github.io/Nim/manual.html#modules-include-statement) que "
"simplesmente importa módulos comuns para sua conveniência, para evitar a "
"digitação. [prelúdio](https://nim-lang.github.io/Nim/prelude.html) também "
"funciona para destinos em JavaScript."

#: Nim-for-Python-Programmers.md:block 109 (header)
msgid "Where Symbols come from?"
msgstr "De onde vêm os símbolos?"

#: Nim-for-Python-Programmers.md:block 110 (unordered list)
msgid "If symbols are unqualified, how do you know where symbols come from?"
msgstr ""
"Se os símbolos não são qualificados, como você sabe de onde vêm os símbolos?"

#: Nim-for-Python-Programmers.md:block 111 (paragraph)
msgid "Given `foo()` is a symbol:"
msgstr "Dado que `foo () `é um símbolo:"

#: Nim-for-Python-Programmers.md:block 112 (unordered list)
msgid ""
"Nim: you typically have `foo()`, [with UFCS support](https://en.wikipedia.org/"
"wiki/Uniform_Function_Call_Syntax#Nim_programming_language)."
msgstr ""
"Nota: você normalmente tem `foo () `, [com suporte do UFCS](https://en.wikipedia."
"org/wiki/Uniform_Function_Call_Syntax#Nim_programming_language)."

#: Nim-for-Python-Programmers.md:block 112 (unordered list)
msgid ""
"Python: you typically have `object.foo()` rather than `module.foo()`, no UFCS."
msgstr ""
"Python: você normalmente tem `object.foo () `em vez de `module.foo ()`, sem UFCS."

#: Nim-for-Python-Programmers.md:block 113 (paragraph)
msgid ""
"Typically the [Editor/IDE](https://marketplace.visualstudio.com/items?"
"itemName=kosz78.nim) should hint where the symbols come from, like in any other "
"programming language:"
msgstr ""
"Normalmente, o [Editor/IDE](https://marketplace.visualstudio.com/items?"
"itemName=kosz78.nim) deve sugerir de onde vêm os símbolos, como em qualquer outra "
"linguagem de programação:"

#: Nim-for-Python-Programmers.md:block 114 (paragraph)
msgid ""
"![](https://raw.githubusercontent.com/pragmagic/vscode-nim/master/images/"
"nim_vscode_output_demo.gif)"
msgstr ""
"! [](https://raw.githubusercontent.com/pragmagic/vscode-nim/master/images/"
"nim_vscode_output_demo.gif)"

#: Nim-for-Python-Programmers.md:block 115 (paragraph)
msgid ""
"Nim comes built-in with [NimSuggest](https://nim-lang.org/docs/nimsuggest.html) "
"for Editor/IDE integrations."
msgstr ""
"O Nim vem integrado com o [NimSuggest](https://nim-lang.org/docs/nimsuggest.html) "
"para integrações de editor/IDE."

#: Nim-for-Python-Programmers.md:block 116 (paragraph)
msgid ""
"Contrary to Python, Nim's type system has all the information about all of the "
"symbols:"
msgstr ""
"Ao contrário do Python, o sistema de tipos de Nim tem todas as informações sobre "
"todos os símbolos:"

#: Nim-for-Python-Programmers.md:block 118 (paragraph)
msgid "`echo` comes from:"
msgstr "`echo` vem de:"

#: Nim-for-Python-Programmers.md:block 120 (paragraph)
msgid ""
"When learning Nim, or for quick prototyping, it is okay to use the symbols fully "
"qualified. Doing so produces no errors, but idiomatic Nim avoids this."
msgstr ""
"Ao aprender Nim ou para prototipagem rápida, não há problema em usar os símbolos "
"totalmente qualificados. Fazer isso não produz erros, mas o Nim idiomático evita "
"isso."

#: Nim-for-Python-Programmers.md:block 121 (header)
#, fuzzy
msgid "Exports"
msgstr "Exportações"

#: Nim-for-Python-Programmers.md:block 122 (paragraph)
msgid ""
"In Python all symbols in the module are visible and mutable from modules that "
"import it, including symbols that should not be used or mutated outside the "
"module."
msgstr ""
"Em Python, todos os símbolos no módulo são visíveis e mutáveis dos módulos que o "
"importam, incluindo símbolos que não devem ser usados ou alterados fora do módulo."

#: Nim-for-Python-Programmers.md:block 123 (paragraph)
msgid ""
"In Nim everything is private by default and therefore is not visible from other "
"modules. To make symbols public and visible in other modules, you have to use the "
"asterisk `*`:"
msgstr ""
"No Nim, tudo é privado por padrão e, portanto, não é visível em outros módulos. "
"Para tornar os símbolos públicos e visíveis em outros módulos, você precisa usar "
"o asterisco `*`:"

#: Nim-for-Python-Programmers.md:block 125 (paragraph)
msgid ""
"The asterisk not only makes the symbol visible to the outside world, the symbol "
"will also appear in the generated documentation (`nim doc`). When you import the "
"module, the symbol will be automatically added to the namespace, but private (not "
"exported) symbols without `*` will not be visible. The asterisk is like a "
"**visual cue** for humans. You can immediately understand what symbols are a part "
"of the \"the public API\" just by looking at the module's source code. The "
"asterisk `*` is pronounced as \"star\"."
msgstr ""
"O asterisco não apenas torna o símbolo visível para o mundo exterior, mas também "
"aparecerá na documentação gerada (`nim doc`). Quando você importa o módulo, o "
"símbolo será automaticamente adicionado ao namespace, mas símbolos privados (não "
"exportados) sem `*` não estarão visíveis. O asterisco é como uma **dica visual** "
"para humanos. Você pode entender imediatamente quais símbolos fazem parte da “API "
"pública” apenas examinando o código-fonte do módulo. O asterisco `*` é "
"pronunciado como “estrela”."

#: Nim-for-Python-Programmers.md:block 126 (paragraph)
msgid ""
"For more information, read: https://narimiran.github.io/2019/07/01/nim-import.html"
msgstr ""
"Para obter mais informações, leia: https://narimiran.github.io/2019/07/01/nim-"
"import.html"

#: Nim-for-Python-Programmers.md:block 127 (header)
msgid "try/import/except"
msgstr "try/import/except"

#: Nim-for-Python-Programmers.md:block 128 (paragraph)
msgid ""
"In Python, imports are a runtime operation and can fail. It is a fairly common "
"pattern that platform-dependent imports are placed inside a try block, and an "
"alternative or fallback inside the except:"
msgstr ""
"Em Python, os imports são uma operação em tempo de execução e podem falhar. É um "
"padrão bastante comum que os imports dependentes da plataforma sejam colocadas "
"dentro de um bloco try e uma alternativa ou fallback dentro do bloco except:"

#: Nim-for-Python-Programmers.md:block 130 (paragraph)
msgid ""
"Nim resolves all imports at compile-time, so something like an `ImportError` does "
"not exist. There's no need to handle import errors at runtime."
msgstr ""
"O Nim resolve todas as importações em tempo de compilação, então algo como um "
"`ImportError` não existe. Não há necessidade de lidar com erros de importação em "
"tempo de execução."

#: Nim-for-Python-Programmers.md:block 132 (paragraph)
msgid ""
"Arrays in Nim are fixed size, start at index `0`, and must contain elements of "
"the same type."
msgstr ""
"As matrizes em Nim são de tamanho fixo, começam no índice `0` e devem conter "
"elementos do mesmo tipo."

#: Nim-for-Python-Programmers.md:block 133 (paragraph)
msgid ""
"When passing an array to a function in Nim, the argument is an immutable "
"reference. Nim will include run-time checks on the bounds of the arrays."
msgstr ""
"Ao passar uma matriz para uma função em Nim, o argumento é uma referência "
"imutável. O Nim incluirá verificações em tempo de execução nos limites das "
"matrizes."

#: Nim-for-Python-Programmers.md:block 134 (paragraph)
msgid ""
"You can use an [`openarray`](https://nim-lang.github.io/Nim/manual.html#types-"
"open-arrays) to accept an array of any size on the function arguments, and you "
"can use `low(your_array)` and `high(your_array)` to query the bounds of the array."
msgstr ""
"Você pode usar um [`openarray`](https://nim-lang.github.io/Nim/manual.html#types-"
"open-arrays) para aceitar uma matriz de qualquer tamanho nos argumentos da "
"função, e você pode usar `low (seu_array) `e `high (seu_array)` para consultar os "
"limites da matriz."

#: Nim-for-Python-Programmers.md:block 135 (paragraph)
msgid ""
"Nim `string` is compatible with `openArray[char]` to avoid unneeded copies for "
"optimization, and `char` is compatible with `int`. Therefore `string` "
"manipulation can be done with math in-place transparently. A function that takes "
"`openArray[char]` accepts `\"abcd\"` *and* `['a', 'b', 'c', 'd']`."
msgstr ""
"Nim `string` é compatível com `openArray [char] `para evitar cópias "
"desnecessárias para otimização, e `char` é compatível com `int`. Portanto, a "
"manipulação de `strings` pode ser feita com a matemática no local de forma "
"transparente. Uma função que usa `openArray [char] `aceita `\"abcd\"` *e*` ['a', "
"'b', 'c', 'd'] `."

#: Nim-for-Python-Programmers.md:block 136 (paragraph)
msgid "Array contents are always contiguous in memory, as are arrays of arrays."
msgstr ""
"O conteúdo da matriz é sempre contíguo na memória, assim como as matrizes de "
"matrizes."

#: Nim-for-Python-Programmers.md:block 138 (unordered list)
msgid "[Views](https://nim-lang.github.io/Nim/manual_experimental.html#view-types)"
msgstr ""
"[Visualizações](https://nim-lang.github.io/Nim/manual_experimental.html#view-"
"types)"

#: Nim-for-Python-Programmers.md:block 139 (header)
msgid "Data Type Sizes"
msgstr "Tamanhos dos tipos de dados"

#: Nim-for-Python-Programmers.md:block 140 (unordered list)
msgid "Whats the size of the different data types?."
msgstr "Qual é o tamanho dos diferentes tipos de dados?."

#: Nim-for-Python-Programmers.md:block 142 (paragraph)
msgid "This is only an approximation for the empty primitives on 64-bit."
msgstr "Essa é apenas uma aproximação para as primitivas vazias em 64 bits."

#: Nim-for-Python-Programmers.md:block 143 (header)
msgid "Objects"
msgstr "Objetos"

#: Nim-for-Python-Programmers.md:block 144 (paragraph)
msgid ""
"Objects in Nim behave quite differently from classes in Python. Objects support "
"inheritance and OOP. Classes are named types in Nim. Functions (procs) are free "
"floating functions, not bound to objects (however, you can use them in a very "
"similar way to Python). You can call a function on objects with the `object."
"function()` syntax as well as `function(object)`; [these are entirely equivalent]"
"(https://en.wikipedia.org/wiki/Uniform_Function_Call_Syntax). Nim does not have "
"an implicit `self` nor `this`. It is best practice to put all your types near the "
"top of the file, but this is not mandatory."
msgstr ""
"Objetos em Nim se comportam de forma bem diferente das classes em Python. Os "
"objetos suportam herança e OOP. As classes são denominadas tipos em Nim. Funções "
"(procs) são funções flutuantes livres, não vinculadas a objetos (no entanto, você "
"pode usá-las de uma forma muito semelhante ao Python). Você pode chamar uma "
"função em objetos com a sintaxe `object.function () `, bem como `function "
"(object)`; [estes são totalmente equivalentes](https://en.wikipedia.org/wiki/"
"Uniform_Function_Call_Syntax). Nim não tem um `eu` implícito nem `isso`. É uma "
"boa prática colocar todos os tipos no topo do arquivo, mas isso não é obrigatório."

#: Nim-for-Python-Programmers.md:block 145 (paragraph)
msgid ""
"A way to imagine this is that **procs get \"glued\" to the types of their "
"arguments at compile-time**, and then you can use them at runtime as if they were "
"Python classes and methods."
msgstr ""
"Uma forma de imaginar isso é que **procs ficam “grudados” nos tipos de seus "
"argumentos em tempo de compilação** e, em seguida, você pode usá-los em tempo de "
"execução como se fossem classes e métodos do Python."

#: Nim-for-Python-Programmers.md:block 146 (paragraph)
msgid "From Python to Nim, *as minimal as possible* example:"
msgstr "Do Python ao Nim, *o mínimo possível* exemplo:"

#: Nim-for-Python-Programmers.md:block 150 (paragraph)
msgid "Minimal inheritance example:"
msgstr "Exemplo de herança mínima:"

#: Nim-for-Python-Programmers.md:block 152 (paragraph)
msgid "Python-like object orientation examples:"
msgstr "Exemplos de orientação de objetos semelhantes aos do Python:"

#: Nim-for-Python-Programmers.md:block 154 (paragraph)
msgid "Inheritance example:"
msgstr "Exemplo de herança:"

#: Nim-for-Python-Programmers.md:block 157 (unordered list)
msgid ""
"[Dynamic Typing via metaprogramming](https://github.com/Carpall/nobject#here-a-"
"simple-object-for-allowing-dynamic-typing-in-nim)"
msgstr ""
"[Tipagem dinâmica via metaprogramação](https://github.com/Carpall/nobject#here-a-"
"simple-object-for-allowing-dynamic-typing-in-nim)"

#: Nim-for-Python-Programmers.md:block 158 (header)
msgid "`self.__init__()`"
msgstr "`self.__init__()`"

#: Nim-for-Python-Programmers.md:block 159 (paragraph)
msgid ""
"After the Cat example you are probably wondering how to do `def __init__(self, "
"arg):`."
msgstr ""
"Depois do exemplo do Cat, você provavelmente está se perguntando como fazer `def "
"__init__ (self, arg) :`."

#: Nim-for-Python-Programmers.md:block 160 (paragraph)
msgid ""
"Python `__init__()` is Nim `newObject()` or `initObject()`. Lets make an "
"`__init__()` for the Cat:"
msgstr ""
"Python `__init__ () `é Nim `newObject ()` ou `initObject () `. Vamos fazer um "
"`__init__ () `para o Cat:"

#: Nim-for-Python-Programmers.md:block 162 (paragraph)
msgid ""
"Naming is a convention and best practice. When you want init for `Foo` just make "
"`newFoo()` or `initFoo()`. As you may notice `initCat` is just a function that "
"returns a `Cat`."
msgstr ""
"A nomenclatura é uma convenção e uma boa prática. Quando você quiser init para "
"`Foo`, basta criar `newFoo () `ou `initFoo ()`. Como você pode notar, `initCat` é "
"apenas uma função que retorna um `Cat`."

#: Nim-for-Python-Programmers.md:block 163 (unordered list)
msgid "`initFoo()` for `object`."
msgstr "`initFoo () `para `object`."

#: Nim-for-Python-Programmers.md:block 163 (unordered list)
msgid "`newFoo()` for `ref object`."
msgstr "`newFoo () `para `ref object`."

#: Nim-for-Python-Programmers.md:block 164 (paragraph)
msgid ""
"[Read the documentation for Naming things following conventions and best "
"practices.](https://nim-lang.org/docs/apis.html)"
msgstr ""
"[Leia a documentação para nomear coisas seguindo as convenções e as melhores "
"práticas.](https://nim-lang.org/docs/apis.html)"

#: Nim-for-Python-Programmers.md:block 165 (header)
msgid "Object Attribute Default Values"
msgstr "Valores padrão do atributo do objeto"

#: Nim-for-Python-Programmers.md:block 166 (paragraph)
msgid ""
"The object constructor is also the way to set custom default values to the "
"attributes of your objects:"
msgstr ""
"O construtor de objetos também é a forma de definir valores padrão personalizados "
"para os atributos de seus objetos:"

#: Nim-for-Python-Programmers.md:block 168 (paragraph)
msgid "A more complete structure for a basic program can be something like:"
msgstr "Uma estrutura mais completa para um programa básico pode ser algo como:"

#: Nim-for-Python-Programmers.md:block 170 (header)
msgid "Run-time Code Expansion"
msgstr "Expansão do código de execução"

#: Nim-for-Python-Programmers.md:block 171 (paragraph)
msgid ""
"Python objects that *internally* use code generation are very very slow, scaling "
"with size. The more you use it the slower it runs. `dataclass`, `metaclass`, "
"decorators, etc can be more than 25 ~ 50x slower than a normal `class`. [`pathlib."
"Path` and its methods can be more than 25 ~ 50x slower than a normal `str`]"
"(https://youtu.be/tFrh9hKMS6Y), and defeats any optimization, including a `.pyc` "
"file. Cython does not have CTFE, so it does not help with this specifically."
msgstr ""
"Objetos Python que *internamente* usam geração de código são muito, muito lentos, "
"escalonando com o tamanho. Quanto mais você o usa, mais lento ele executa. "
"`dataclass`, `metaclasse`, decoradores, etc. podem ser mais de 25 ~ 50x mais "
"lentos do que uma `classe` normal. [`Pathlib.path` e seus métodos podem ser mais "
"de 25 ~ 50x mais lentos do que um `str`] normal (https://youtu.be/tFrh9hKMS6Y) e "
"anulam qualquer otimização, incluindo um arquivo `.pyc`. O Cython não tem CTFE, "
"então isso não ajuda especificamente."

#: Nim-for-Python-Programmers.md:block 172 (unordered list)
msgid ""
"Nim code expansion is done at compile-time, making its code generation zero cost "
"at run-time."
msgstr ""
"A expansão do código Nim é feita em tempo de compilação, tornando seu custo de "
"geração de código zero em tempo de execução."

#: Nim-for-Python-Programmers.md:block 173 (paragraph)
msgid ""
"For example, you can see the result of ARC code expansion during compilation "
"using `--expandArc`. This is how Nim does compile-time memory management "
"(approximation):"
msgstr ""
"Por exemplo, você pode ver o resultado da expansão do código ARC durante a "
"compilação usando `—expandArc`. É assim que o Nim faz o gerenciamento de memória "
"em tempo de compilação (aproximação):"

#: Nim-for-Python-Programmers.md:block 174 (paragraph)
msgid ""
"![](https://raw.githubusercontent.com/juancarlospaco/nim-presentation-slides/"
"master/Nim_ARC.png)"
msgstr ""
"! [](https://raw.githubusercontent.com/juancarlospaco/nim-presentation-slides/"
"master/Nim_ARC.png)"

#: Nim-for-Python-Programmers.md:block 176 (unordered list)
msgid ""
"[`macros.expandMacros` shows you the code expansion on the terminal during "
"compilation](https://nim-lang.github.io/Nim/macros.html#expandMacros.m%2Ctyped)"
msgstr ""
"[`Macros.expandMacros` mostra a expansão do código no terminal durante a "
"compilação](https://nim-lang.github.io/Nim/macros.html#expandMacros.m%2Ctyped)"

#: Nim-for-Python-Programmers.md:block 177 (header)
msgid "Unsafe Type Hints"
msgstr "Unsafe Type Hints (dicas de tipagem inseguras)"

#: Nim-for-Python-Programmers.md:block 178 (paragraph)
msgid ""
"Python \"type hints\" can be almost anything and are implicitly executed at run-"
"time. Needless to say, this can be very unsafe:"
msgstr ""
"As “type hints” do Python podem ser quase qualquer coisa e são executadas "
"implicitamente em tempo de execução. Não é preciso dizer que isso pode ser muito "
"inseguro:"

#: Nim-for-Python-Programmers.md:block 180 (paragraph)
msgid "Nim types must be a valid Nim type, types are type checked at compile-time:"
msgstr ""
"Os tipos de Nim devem ser válidos; os tipos são verificados no momento da "
"compilação:"

#: Nim-for-Python-Programmers.md:block 182 (paragraph)
msgid "Another example"
msgstr "Outro exemplo"

#: Nim-for-Python-Programmers.md:block 184 (header)
msgid "By-Value vs By-Reference"
msgstr "Por valor x por referência"

#: Nim-for-Python-Programmers.md:block 185 (unordered list)
msgid "Does Nim passes data around \"by value\" or \"by reference\"? It depends ..."
msgstr "Nim transmite dados “por valor” ou “por referência”? Depende..."

#: Nim-for-Python-Programmers.md:block 186 (paragraph)
msgid ""
"The Nim compiler automatically determines whether a parameter is passed by-value "
"or by-reference based on the parameter type's size."
msgstr ""
"O compilador Nim determina automaticamente se um parâmetro é passado por valor ou "
"por referência com base no tamanho do tipo de parâmetro."

#: Nim-for-Python-Programmers.md:block 187 (paragraph)
msgid ""
"If a parameter must be passed by-value or by-reference (such as when interfacing "
"with a C library), then use the `{.bycopy.}` or `{.byref.}` pragmas."
msgstr ""
"Se um parâmetro precisar ser passado por valor ou por referência (como ao fazer "
"interface com uma biblioteca C), use os pragmas `{.bycopy.}` ou `{.byref.}`."

#: Nim-for-Python-Programmers.md:block 188 (paragraph)
msgid ""
"**Nim passes objects larger than `3 * sizeOf(int)` by reference for "
"performance**, but this is architecture and implementation defined. So the "
"following information is just an *approximation* for `x86_64`:"
msgstr ""
"**Nim passa objetos maiores que `3 * sizeOf (int) `por referência para "
"desempenho**, mas isso é arquitetura e implementação definidas. Portanto, as "
"informações a seguir são apenas uma *aproximação* para `x86_64`:"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "Declaration"
msgstr "Declaração"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "Value or Reference?"
msgstr "Valor ou referência?"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "Implicit or Explicit?"
msgstr "Implícito ou explícito?"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "Managed or Unmanaged?"
msgstr "Gerenciado ou não gerenciado?"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "Observations"
msgstr "Observações"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "`symbol: int`"
msgstr "`symbol: int`"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "By value"
msgstr "Por valor"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "Implicit"
msgstr "Implícito"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "Managed"
msgstr "Gerenciado"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "Frequent use"
msgstr "Uso frequente"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "`symbol: var int`"
msgstr "`symbol: var int`"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "By reference"
msgstr "Por referência"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "`symbol: ref int`"
msgstr "`symbol: ref int`"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "Explicit"
msgstr "Explícito"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "Rare"
msgstr "Raro"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "`symbol: ptr int`"
msgstr "`symbol: ptr int`"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "Unmanaged"
msgstr "Não gerenciado"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "C/C++ FFI"
msgstr "C/C++ FFI"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "`symbol: var ref int`"
msgstr "`symbol: var ref int`"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "`symbol: var ptr int`"
msgstr "`symbol: var ptr int`"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "`symbol: pointer`"
msgstr "`symbol: pointer`"

#: Nim-for-Python-Programmers.md:block 189 (table)
msgid "Unmanaged Pointer"
msgstr "Ponteiro não gerenciado"

#: Nim-for-Python-Programmers.md:block 190 (unordered list)
msgid ""
"Iff a \"by value\" symbol is big, then it is passed \"by reference\" "
"automatically."
msgstr ""
"Se um símbolo “por valor” for grande, ele será transmitido “por referência” "
"automaticamente."

#: Nim-for-Python-Programmers.md:block 190 (unordered list)
msgid ""
"[You can disable this optimization using `{.bycopy.}` pragma on the symbol.]"
"(https://nim-lang.github.io/Nim/manual.html#foreign-function-interface-bycopy-"
"pragma)"
msgstr ""
"[Você pode desativar essa otimização usando o pragma `{.bycopy.}` no símbolo.]"
"(https://nim-lang.github.io/Nim/manual.html#foreign-function-interface-bycopy-"
"pragma)"

#: Nim-for-Python-Programmers.md:block 190 (unordered list)
msgid ""
"[The `{.byref.}` forces passing \"by reference\", the reverse of `{.bycopy.}`.]"
"(https://nim-lang.github.io/Nim/manual.html#foreign-function-interface-byref-"
"pragma)"
msgstr ""
"[O `{.byref.}` força a passagem “por referência”, o inverso de `{.bycopy.}`.]"
"(https://nim-lang.github.io/Nim/manual.html#foreign-function-interface-byref-"
"pragma)"

#: Nim-for-Python-Programmers.md:block 190 (unordered list)
msgid "Nim `seq` is passed around \"by reference\" by default."
msgstr "Nim `seq` é passado “por referência” por padrão."

#: Nim-for-Python-Programmers.md:block 190 (unordered list)
msgid ""
"Nim `string` is [Copy-On-Write](https://en.wikipedia.org/wiki/Copy-on-write) COW "
"(ARC/ORC)."
msgstr ""
"Sua `string` é [Copy-On-Write](https://en.wikipedia.org/wiki/Copy-on-write) COW "
"(ARC/ORC)."

#: Nim-for-Python-Programmers.md:block 190 (unordered list)
#, fuzzy
msgid ""
"[Pointer Arithmetic can be performed with pointer.](https://en.wikipedia.org/wiki/"
"Pointer%20arithmetic)"
msgstr ""
"[A aritmética do ponteiro pode ser executada com o ponteiro.](https://en."
"wikipedia.org/wiki/Pointer%20arithmetic)"

#: Nim-for-Python-Programmers.md:block 191 (header)
msgid "Ranges"
msgstr "Intervalos"

#: Nim-for-Python-Programmers.md:block 192 (paragraph)
msgid ""
"In Python, simple integer for loops use the `range` generator function. For the "
"1- and 2- argument forms of this function, nim's [`..` iterator](https://nim-lang."
"org/docs/system.html#...i%2CT%2CT) works almost the same way:"
msgstr ""
"Em Python, um número inteiro simples para loops usa a função geradora `range`. "
"Para as formas de argumento 1 e 2 dessa função, o [`..` iterator](https://nim-"
"lang.org/docs/system.html#...i%2CT%2CT) de nim funciona quase da mesma maneira:"

#: Nim-for-Python-Programmers.md:block 194 (paragraph)
msgid ""
"Note that the `..` operator includes the end of the range, whereas Python's "
"`range(a, b)` does not include `b`. If you prefer this behavior, use the [`..<` "
"iterator](https://nim-lang.org/docs/system.html#..%3C.i%2CT%2CT) instead:"
msgstr ""
"Observe que o operador `..` inclui o final do intervalo, enquanto o `range (a, b) "
"`do Python não inclui `b`. Se você preferir esse comportamento, use o iterador "
"[`.. <`](https://nim-lang.org/docs/system.html#..%3C.i%2CT%2CT) em vez disso:"

#: Nim-for-Python-Programmers.md:block 196 (paragraph)
msgid ""
"Python `range()` also has an optional third parameter, which is the value to "
"increment by each step. This can be positive or negative. If you need this "
"behavior, use the [`countup`](https://nim-lang.org/docs/system.html#countup."
"i%2CT%2CT%2CPositive) or [`countdown`](https://nim-lang.org/docs/system."
"html#countdown.i%2CT%2CT%2CPositive) iterators:"
msgstr ""
"O `range () `do Python também tem um terceiro parâmetro opcional, que é o valor a "
"ser incrementado em cada etapa. Isso pode ser positivo ou negativo. Se você "
"precisar desse comportamento, use os iteradores [`countup`](https://nim-lang.org/"
"docs/system.html#countup.i%2CT%2CT%2CPositive) ou [`countdown`](https://nim-lang."
"org/docs/system.html#countdown.i%2CT%2CT%2CPositive):"

#: Nim-for-Python-Programmers.md:block 198 (paragraph)
msgid "Convert from `range` to `seq`:"
msgstr "Converta de `range` para `seq`:"

#: Nim-for-Python-Programmers.md:block 201 (unordered list)
msgid ""
"[enumerate](https://nim-lang.github.io/Nim/enumerate.html#enumerate."
"m%2CForLoopStmt)"
msgstr ""
"[enumerate](https://nim-lang.github.io/Nim/enumerate.html#enumerate."
"m%2CForLoopStmt)"

#: Nim-for-Python-Programmers.md:block 202 (header)
msgid "Slices"
msgstr "Fatias"

#: Nim-for-Python-Programmers.md:block 203 (paragraph)
msgid ""
"The syntax for slice ranges is different. Python's `a[x:y]` is Nim's `a[x ..< y]`."
msgstr ""
"A sintaxe dos intervalos de fatias é diferente. `a [x:y] `do Python é `a [x.. < "
"y]` de Nim."

#: Nim-for-Python-Programmers.md:block 205 (header)
msgid "Reverse Index Slices"
msgstr "Fatias de índice reverso"

#: Nim-for-Python-Programmers.md:block 206 (paragraph)
msgid ""
"In Nim a reverse index or backwards index uses `^` with the number, like `^1`. "
"Backwards indexes have a specific type `BackwardsIndex`, and they can also be "
"\"prepared\" at compile-time as a `const`:"
msgstr ""
"Em Nim, um índice reverso ou índice inverso usa `^` com o número, como `^1`. Os "
"índices retroativos têm um tipo específico `backwardsIndex` e também podem ser "
"“preparados” em tempo de compilação como `const`:"

#: Nim-for-Python-Programmers.md:block 208 (header)
msgid "Static Bounds-Check"
msgstr "Verificação estática de limites"

#: Nim-for-Python-Programmers.md:block 209 (unordered list)
msgid ""
"Nim has [static bounds-checking at compile-time.](https://en.wikipedia.org/wiki/"
"Static_program_analysis)"
msgstr ""
"Nim tem [verificação estática de limites em tempo de compilação.](https://en."
"wikipedia.org/wiki/Static_program_analysis)"

#: Nim-for-Python-Programmers.md:block 210 (paragraph)
msgid "Lets compare very simplified examples:"
msgstr "Vamos comparar exemplos muito simplificados:"

#: Nim-for-Python-Programmers.md:block 212 (paragraph)
msgid "This crashes at run-time because there is no index 9:"
msgstr "Isso falha em tempo de execução porque não há índice 9:"

#: Nim-for-Python-Programmers.md:block 214 (paragraph)
msgid "Let's see Nim:"
msgstr "Vamos ver Nim:"

#: Nim-for-Python-Programmers.md:block 216 (paragraph)
msgid "Compile and run:"
msgstr "Compile e execute:"

#: Nim-for-Python-Programmers.md:block 218 (paragraph)
msgid ""
"Nim checks at compile-time that `[0, 1, 2]` has no index `9`, because `9 > 2`. "
"Therefore, it won't compile nor run."
msgstr ""
"Nim verifica em tempo de compilação que `[0, 1, 2]` não tem índice `9`, porque `9 "
"> 2`. Portanto, ele não será compilado nem executado."

#: Nim-for-Python-Programmers.md:block 219 (paragraph)
msgid ""
"This also works with Subrange. Let's say you have a integer variable that **must "
"be positive**:"
msgstr ""
"Isso também funciona com o Subrange. Digamos que você tenha uma variável inteira "
"que **deva ser positiva**:"

#: Nim-for-Python-Programmers.md:block 223 (paragraph)
msgid ""
"Nim checks at compile-time that `must_be_positive` is not `Positive` because `1 > "
"-9`. It won't compile nor run."
msgstr ""
"Nim verifica em tempo de compilação se `must_be_positive` não é `Positivo` porque "
"`1 > -9`. Ele não será compilado nem executado."

#: Nim-for-Python-Programmers.md:block 226 (paragraph)
msgid ""
"You can control this with `--staticBoundChecks:on` or `--staticBoundChecks:off`."
msgstr ""
"Você pode controlar isso com `—staticBoundChecks:on` ou `—staticBoundChecks:off`."

#: Nim-for-Python-Programmers.md:block 227 (paragraph)
msgid ""
"With `--staticBoundChecks:off` it may raise an error at run-time like Python does."
msgstr ""
"Com `—staticBoundChecks:off`, isso pode gerar um erro em tempo de execução, como "
"o Python faz."

#: Nim-for-Python-Programmers.md:block 228 (unordered list)
msgid "For better documentation see: https://nim-lang.github.io/Nim/drnim.html"
msgstr ""
"Para obter uma documentação melhor, consulte: https://nim-lang.github.io/Nim/"
"drnim.html"

#: Nim-for-Python-Programmers.md:block 229 (header)
msgid "Null Coalescing"
msgstr "Coalescência nula"

#: Nim-for-Python-Programmers.md:block 230 (paragraph)
msgid ""
"Python does not have a [null-coalescing operator](https://en.wikipedia.org/wiki/"
"Null_coalescing_operator) (at the time of writing)."
msgstr ""
"O Python não tem um [operador de coalescência nula](https://en.wikipedia.org/wiki/"
"Null_coalescing_operator) (no momento em que este artigo foi escrito)."

#: Nim-for-Python-Programmers.md:block 231 (paragraph)
msgid "Python programmers use the ternary conditional operator instead:"
msgstr ""
"Em vez disso, os programadores de Python usam o operador condicional ternário:"

#: Nim-for-Python-Programmers.md:block 233 (paragraph)
msgid ""
"Nim has a [wrapnils module](https://nim-lang.github.io/Nim/wrapnils.html) with a "
"`?.` null-coalescing operator, which simplifies code by reducing the need for "
"`if..elif...else` branches around **intermediate values that may be null**."
msgstr ""
"Nim tem um [módulo wrapnils](https://nim-lang.github.io/Nim/wrapnils.html) com um "
"`?. `operador de coalescência nula, que simplifica o código ao reduzir a "
"necessidade de ramificações `if.. elif... else` em torno de **valores "
"intermediários que podem ser nulos**."

#: Nim-for-Python-Programmers.md:block 235 (paragraph)
msgid "Null is `None` in Python. Null is `nil` in Nim."
msgstr "Null é `None` em Python. Null é `nil` em Nim."

#: Nim-for-Python-Programmers.md:block 236 (paragraph)
msgid "See: https://nim-lang.github.io/Nim/wrapnils.html"
msgstr "Veja: https://nim-lang.github.io/Nim/wrapnils.html"

#: Nim-for-Python-Programmers.md:block 237 (header)
msgid "With Context Manager"
msgstr "With Context Manager"

#: Nim-for-Python-Programmers.md:block 238 (paragraph)
msgid ""
"There is no direct built-in equivalent to Python's `with` construct. In Nim there "
"are the following options:"
msgstr ""
"Não há equivalente nativo direto à construção `with` do Python. No Nim, existem "
"as seguintes opções:"

#: Nim-for-Python-Programmers.md:block 239 (unordered list)
#, fuzzy
msgid "[`template`](#templates)"
msgstr "[`modelo`](#templates)"

#: Nim-for-Python-Programmers.md:block 239 (unordered list)
msgid "[`macros`](https://nim-lang.github.io/Nim/manual.html#macros)"
msgstr "[`macros`](https://nim-lang.github.io/Nim/manual.html#macros)"

#: Nim-for-Python-Programmers.md:block 239 (unordered list)
#, fuzzy
msgid ""
"Named [`block`](https://nim-lang.github.io/Nim/manual.html#statements-and-"
"expressions-block-statement)"
msgstr ""
"Nomeado [`block`](https://nim-lang.github.io/Nim/manual.html#statements-and-"
"expressions-block-statement)"

#: Nim-for-Python-Programmers.md:block 240 (paragraph)
msgid "[See the Templates section for examples.](#templates)"
msgstr "[Consulte a seção Modelos para ver exemplos.](#templates)"

#: Nim-for-Python-Programmers.md:block 241 (header)
msgid "Strings"
msgstr "Strings"

#: Nim-for-Python-Programmers.md:block 242 (table)
msgid "Lang"
msgstr "Lang"

#: Nim-for-Python-Programmers.md:block 242 (table)
msgid "String"
msgstr "String"

#: Nim-for-Python-Programmers.md:block 242 (table)
msgid "Multi-line string"
msgstr "String de várias linhas"

#: Nim-for-Python-Programmers.md:block 242 (table)
msgid "Raw String"
msgstr "String Raw"

#: Nim-for-Python-Programmers.md:block 242 (table)
msgid "Multi-line Raw string"
msgstr "String Raw de múltiplas linhas"

#: Nim-for-Python-Programmers.md:block 242 (table)
msgid "Formatted Literals"
msgstr "Literais formatados"

#: Nim-for-Python-Programmers.md:block 242 (table)
msgid "Quote"
msgstr "Quote (mascarando)"

#: Nim-for-Python-Programmers.md:block 242 (table)
msgid "`\"foo\"`"
msgstr "`\"foo\"`"

#: Nim-for-Python-Programmers.md:block 242 (table)
msgid "`\"\"\"foo\"\"\"`"
msgstr "`\"\"\"\"foo\"\"\"`"

#: Nim-for-Python-Programmers.md:block 242 (table)
msgid "`r\"foo\"`"
msgstr "`r\"foo\"`"

#: Nim-for-Python-Programmers.md:block 242 (table)
msgid "`r\"\"\"foo\"\"\"`"
msgstr "`r\"\"\"foo\"\"\"`"

#: Nim-for-Python-Programmers.md:block 242 (table)
msgid "`f\"\"\"{1 + 2}\"\"\"`"
msgstr "`f\"\" \"{1 + 2}\" \"\"`"

#: Nim-for-Python-Programmers.md:block 242 (table)
msgid "`\"` `'`"
msgstr "`\"``'`"

#: Nim-for-Python-Programmers.md:block 242 (table)
msgid "`fmt\"\"\"{1 + 2}\"\"\"`"
msgstr "`fmt\"\" \"{1 + 2}\" \"\"`"

#: Nim-for-Python-Programmers.md:block 242 (table)
msgid "`\"`"
msgstr "`\"`"

#: Nim-for-Python-Programmers.md:block 243 (header)
msgid "String Ops"
msgstr "Operações de string"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "Ops"
msgstr "Operações"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "Lower"
msgstr "Lower"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`\"ABCD\".lower()`"
msgstr "`\"ABCD” .lower () `"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`\"ABCD\".toLowerAscii()`"
msgstr "`\"ABCD\".toLowerAscii()`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "Strip"
msgstr "Strip"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`\" ab \".strip()`"
msgstr "`” ab “.strip ()`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "Split"
msgstr "Split"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`\"a,b,c\".split(\",\")`"
msgstr "`\"a,b,c\".split(\",\")`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "Concatenation"
msgstr "Concatenação"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`\"a\" + \"b\"`"
msgstr "`\"a” + “b\"`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`\"a\" & \"b\"`"
msgstr "`\"a” e “b\"`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "Find"
msgstr "Find"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`\"abcd\".find(\"c\")`"
msgstr "`\"abcd\".find(\"c\")`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "Starts With"
msgstr "Começa com"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`\"abc\".startswith(\"ab\")`"
msgstr "`\"abc\".startswith(\"ab\")`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "Ends With"
msgstr "Termina com"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`\"abc\".endswith(\"ab\")`"
msgstr "`\"abc\".endswith(\"ab\")`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "Split Lines"
msgstr "Dividindo por Linha"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`\"1\\n2\\n3\".splitlines()`"
msgstr "`\"1\\n2\\n3\".splitlines()`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "Slicing"
msgstr "Fatiando"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`\"abcd\"[0:2]`"
msgstr "`\"abcd\"[0:2]`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`\"abcd\"[0 ..< 2]`"
msgstr "`\"abcd\"[0 ..< 2]`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "Slicing 1 char"
msgstr "Cortando 1 caractere"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`\"abcd\"[2]`"
msgstr "`\"abcd\"[2]`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "Reverse Slicing"
msgstr "Corte reverso"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`\"abcd\"[-1]`"
msgstr "`\"abcd\"[-1]`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`\"abcd\"[^1]`"
msgstr "`\"abcd\"[^1]`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "Normalize"
msgstr "Normalize"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid ""
"[`unicodedata.normalize(\"NFC\", \"Foo\")`](https://docs.python.org/3/library/"
"unicodedata.html#unicodedata.normalize \"str().lower() is not the recommended "
"way\")"
msgstr ""
"[`unicodedata.normalize(\"NFC\", \"Foo\")`](https://docs.python.org/3/library/"
"unicodedata.html#unicodedata.normalize \"str().lower() não é a forma "
"recomendada\")"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`\"Foo\".normalize()`"
msgstr "`\"Foo\".normalize()`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "Count Lines"
msgstr "Contando Linhas"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`len(\"1\\n2\\n3\".splitlines())`"
msgstr "`len(\"1\\n2\\n3\".splitlines())`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`\"1\\n2\\n3\".countLines()`"
msgstr "`\"1\\n2\\n3\".countLines()`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "Repeat"
msgstr "Repeat (repetir)"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`\"foo\" * 9`"
msgstr "`\"foo\" * 9`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`\"foo\".repeat(9)`"
msgstr "`\"foo\".repeat(9)`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "Indent"
msgstr "Recuar (indent)"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`textwrap.indent(\"foo\", \" \" * 9)`"
msgstr "`textwrap.indent(\"foo\", \" \" * 9)`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`\"foo\".indent(9)`"
msgstr "`\"foo\".indent(9)`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "Unindent"
msgstr "Unindent"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid ""
"[`textwrap.dedent(\"foo\")`](https://docs.python.org/3/library/textwrap."
"html#textwrap.dedent \"textwrap.dedent() Removes ALL indentation!\")"
msgstr ""
"[`textwrap.dedent(“foo”)`](https://docs.python.org/3/library/textwrap."
"html#textwrap.dedent “textwrap.dedent () Remove TODA a indentação!”)"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`\"foo\".unindent(9)`"
msgstr "`\"foo\".unindent(9)`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "Parse Bool"
msgstr "Parse Bool"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid ""
"[`bool(distutils.util.strtobool(\"fALse\"))`](https://stackoverflow.com/q/715417 "
"\"bool('fALse') == True\") :question:"
msgstr ""
"[`bool(distutils.util.strtobool (“fALse”)) `](https://stackoverflow.com/q/715417 "
"“bool ('FalSE') == True”) :pergunta:"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`parseBool(\"fALse\")`"
msgstr "`parseBool(\"fALse\")`"

#: Nim-for-Python-Programmers.md:block 244 (table)
#, fuzzy
msgid "Parse Int"
msgstr "Parse Int"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`int(\"42\")`"
msgstr "`int(\"42\")`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`parseInt(\"42\")`"
msgstr "`parseInt(\"42\")`"

#: Nim-for-Python-Programmers.md:block 244 (table)
#, fuzzy
msgid "Parse Float"
msgstr "Parse Float"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`float(\"3.14\")`"
msgstr "`float(\"3.14\")`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`parseFloat(\"3.14\")`"
msgstr "`parseFloat(\"3.14\")`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "Formatted String Literals"
msgstr "Literais de string formatados"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "`f\"foo {1 + 2} bar {variable}\"`"
msgstr "`f\"foo {1 + 2} bar {variable}\"`"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid ""
"[`fmt\"foo {1 + 2} bar {variable}\"`](https://nim-lang.org/docs/strformat.html)"
msgstr ""
"[`fmt\"foo {1 + 2} bar {variable}\"`](https://nim-lang.org/docs/strformat.html)"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid "Levenshtein distance"
msgstr "Distância de Levenshtein"

#: Nim-for-Python-Programmers.md:block 244 (table)
msgid ""
"[`editDistance(\"Kitten\", \"Bitten\")`](https://nim-lang.org/docs/editdistance."
"html)"
msgstr ""
"[`editDistance (“Kitten”, “Bitten”) `](https://nim-lang.org/docs/editdistance."
"html)"

#: Nim-for-Python-Programmers.md:block 245 (unordered list)
msgid ""
"**Nim string operations require [`import std/strutils`.](https://nim-lang.org/"
"docs/strutils.html)**"
msgstr ""
"**As operações de string Nim requerem [`import std/strutils`.](https://nim-lang."
"org/docs/strutils.html) **"

#: Nim-for-Python-Programmers.md:block 245 (unordered list)
msgid ""
"A [very detailed comparison.](https://scripter.co/notes/string-functions-nim-vs-"
"python/)"
msgstr ""
"[Uma comparação muito detalhada.](https://scripter.co/notes/string-functions-nim-"
"vs-python/)"

#: Nim-for-Python-Programmers.md:block 246 (header)
msgid "String Efficiency"
msgstr "Eficiência de String"

#: Nim-for-Python-Programmers.md:block 247 (paragraph)
msgid ""
"Single memory allocation strings can be done with `newStringOfCap(capacity = "
"42)`, that returns a new empty string `\"\"` but with allocated `capacity` of "
"`42`. If you pass beyond the `capacity` it will not crash nor buffer overflow:"
msgstr ""
"Strings podem ser alocadas em memória de uma só vez com `newStringOfCap (capacity "
"= 42) `, que retorna uma nova string vazia `\"\"`, mas com `capacidade` alocada "
"de `42`. Se você ultrapassar a `capacidade`, ela não falhará nem estourará o "
"buffer:"

#: Nim-for-Python-Programmers.md:block 251 (paragraph)
msgid "This difference may get bigger for strings inside for loops or while loops."
msgstr "Essa diferença pode ficar maior para strings dentro de laços for ou while."

#: Nim-for-Python-Programmers.md:block 252 (header)
msgid "F-Strings"
msgstr "F-Strings"

#: Nim-for-Python-Programmers.md:block 253 (paragraph)
msgid ""
"Nim `strformat` implements formatted string literals inspired by Python f-"
"strings. `strformat` is implemented using metaprogramming and the code expansion "
"is done at compile-time. It also works for the JavaScript target."
msgstr ""
"Nim `strformat` implementa literais de string formatados inspirados nas f-strings "
"do Python. O `strformat` é implementado usando metaprogramação e a expansão do "
"código é feita em tempo de compilação. Também funciona para o destino JavaScript."

#: Nim-for-Python-Programmers.md:block 254 (paragraph)
msgid ""
"Similar to Python f-strings, you can [debug the key-value inside the string using "
"an equal sign](https://nim-lang.github.io/Nim/strformat.html#debugging-strings). "
"`fmt\"{key=}\"` expands to `fmt\"key={value}\"`:"
msgstr ""
"Semelhante às f-strings do Python, você pode [depurar o valor da chave dentro da "
"string usando um sinal de igual](https://nim-lang.github.io/Nim/strformat."
"html#debugging-strings). `fmt \"{key=}\" `se expande para `fmt\"key= {value} \"`:"

#: Nim-for-Python-Programmers.md:block 256 (paragraph)
msgid "Nim `strformat` supports backslash, while Python's f-strings do not:"
msgstr ""
"Nim `strformat` suporta barra invertida, enquanto as strings f do Python não:"

#: Nim-for-Python-Programmers.md:block 260 (paragraph)
msgid ""
"You can choose a custom character pair to open and close the formatting inside "
"the string by passing the `char` as argument:"
msgstr ""
"Você pode escolher um par de caracteres personalizado para abrir e fechar a "
"formatação dentro da string passando o `char` como argumento:"

#: Nim-for-Python-Programmers.md:block 262 (paragraph)
msgid "Using characters like backtick and space `' '` works:"
msgstr "Usar caracteres como apóstrofo invertido e espaço `' '`funciona:"

#: Nim-for-Python-Programmers.md:block 264 (unordered list)
msgid ""
"[It is recommended to read the full documentation of `strformat`.](https://nim-"
"lang.github.io/Nim/strformat.html)"
msgstr ""
"[É recomendável ler a documentação completa do `strformat`.](https://nim-lang."
"github.io/Nim/strformat.html)"

#: Nim-for-Python-Programmers.md:block 266 (paragraph)
msgid ""
"Python raw string can not end in `\"\\\"`, but Nim raw string works just fine:"
msgstr ""
"A string raw do Python não pode terminar em `\"\\\"`, mas a string raw do Nim "
"funciona muito bem:"

#: Nim-for-Python-Programmers.md:block 270 (paragraph)
msgid ""
"This may be relevant when working with strings that use `\"\\\"`, like "
"filesystems paths `r\"C:\\mypath\\\"`, etc."
msgstr ""
"Isso pode ser relevante ao trabalhar com cadeias de caracteres que usam `\"\\\"`, "
"como caminhos de sistemas de arquivos `r” C:\\mypath\\ \"`, etc."

#: Nim-for-Python-Programmers.md:block 271 (header)
msgid "Standard Library Equivalents"
msgstr "Equivalentes de biblioteca padrão"

#: Nim-for-Python-Programmers.md:block 272 (unordered list)
msgid ""
"[Python Standard Library for Nim.](https://github.com/juancarlospaco/"
"cpython#alternative-stdlib-for-nim-for-python-targets)"
msgstr ""
"[Biblioteca padrão Python para Nim.](https://github.com/juancarlospaco/"
"cpython#alternative-stdlib-for-nim-for-python-targets)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Use"
msgstr "Use"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Operating System"
msgstr "Sistema operacional"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "os"
msgstr "os"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[os](https://nim-lang.org/docs/os.html)"
msgstr "[os](https://nim-lang.org/docs/os.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "String operations"
msgstr "Operações de string"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "string"
msgstr "string"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[strutils](https://nim-lang.org/docs/strutils.html)"
msgstr "[strutils](https://nim-lang.org/docs/strutils.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Date & time"
msgstr "Data e hora"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "datetime"
msgstr "datetime"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[times](https://nim-lang.org/docs/times.html)"
msgstr "[times](https://nim-lang.org/docs/times.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Random"
msgstr "Random"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "random"
msgstr "random"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[random](https://nim-lang.org/docs/random.html)"
msgstr "[random](https://nim-lang.org/docs/random.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Regular expressions (Backend)"
msgstr "Expressões regulares (Backend)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "re"
msgstr "re"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[re](https://nim-lang.org/docs/re.html)"
msgstr "[re](https://nim-lang.org/docs/re.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Regular expressions (Frontend)"
msgstr "Expressões regulares (Frontend)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[jsre](https://nim-lang.github.io/Nim/jsre.html)"
msgstr "[jsre](https://nim-lang.github.io/Nim/jsre.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "HTTP"
msgstr "HTTP"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "urllib"
msgstr "urllib"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[httpclient](https://nim-lang.org/docs/httpclient.html)"
msgstr "[httpclient](https://nim-lang.org/docs/httpclient.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Logging"
msgstr "Logando"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "logging"
msgstr "logging"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[logging](https://nim-lang.org/docs/logging.html)"
msgstr "[registro](https://nim-lang.org/docs/logging.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Run external commands"
msgstr "Executando comandos externos"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "subprocess"
msgstr "subprocess"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[osproc](https://nim-lang.org/docs/osproc.html)"
msgstr "[osproc](https://nim-lang.org/docs/osproc.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Path manipulation"
msgstr "Manipulação de caminhos (path)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "pathlib, os.path"
msgstr "pathlib, os.path"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Mathematic"
msgstr "Matemática"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "math, cmath"
msgstr "math, cmath"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[math](https://nim-lang.org/docs/math.html)"
msgstr "[math](https://nim-lang.org/docs/math.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "MIME Types"
msgstr "Tipos MIME"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "mimetypes"
msgstr "tipos MIME"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[mimetypes](https://nim-lang.org/docs/mimetypes.html)"
msgstr "[mimetypes](https://nim-lang.org/docs/mimetypes.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "SQLite SQL"
msgstr "SQLite SQL"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "sqlite3"
msgstr "sqlite3"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[db_sqlite](https://nim-lang.org/docs/db_sqlite.html)"
msgstr "[db_sqlite](https://nim-lang.org/docs/db_sqlite.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Postgres SQL"
msgstr "Postgres SQL"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[db_postgres](https://nim-lang.org/docs/db_postgres.html)"
msgstr "[db_postgres](https://nim-lang.org/docs/db_postgres.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Levenshtein Distance"
msgstr "Distância de Levenshtein"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[editdistance](https://nim-lang.github.io/Nim/editdistance.html)"
msgstr "[editdistance](https://nim-lang.github.io/Nim/editdistance.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Serialization"
msgstr "Serialização"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "pickle"
msgstr "pickle"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid ""
"[json](https://nim-lang.org/docs/json.html), [jsonutils](https://nim-lang.github."
"io/Nim/jsonutils.html), [marshal](https://nim-lang.org/docs/marshal.html)"
msgstr ""
"[json](https://nim-lang.org/docs/json.html), [jsonutils](https://nim-lang.github."
"io/Nim/jsonutils.html), [marshal](https://nim-lang.org/docs/marshal.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Base64"
msgstr "Base64"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "base64"
msgstr "base64"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[base64](https://nim-lang.org/docs/base64.html)"
msgstr "[base64](https://nim-lang.org/docs/base64.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Open web browser URL"
msgstr "Abre o URL do navegador da web"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "webbrowser"
msgstr "webbrowser"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[browsers](https://nim-lang.org/docs/browsers.html)"
msgstr "[browsers](https://nim-lang.org/docs/browsers.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "asyncio"
msgstr "asyncio"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid ""
"[asyncdispatch](https://nim-lang.org/docs/asyncdispatch.html), [asyncfile]"
"(https://nim-lang.org/docs/asyncfile.html), [asyncnet](https://nim-lang.org/docs/"
"asyncnet.html), [asyncstreams](https://nim-lang.org/docs/asyncstreams.html)"
msgstr ""
"[asyncdispatch](https://nim-lang.org/docs/asyncdispatch.html), [asyncfile]"
"(https://nim-lang.org/docs/asyncfile.html), [asyncnet](https://nim-lang.org/docs/"
"asyncnet.html), [asyncstreams](https://nim-lang.org/docs/asyncstreams.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Unittests"
msgstr "Testes unitários"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "unittest"
msgstr "unittest"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[unittest](https://nim-lang.org/docs/unittest.html)"
msgstr "[unittest](https://nim-lang.org/docs/unittest.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Diff"
msgstr "Diff"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "difflib"
msgstr "difflib"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[diff](https://nim-lang.org/docs/diff.html)"
msgstr "[diff](https://nim-lang.org/docs/diff.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Colors"
msgstr "Cores"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "colorsys"
msgstr "colorsys"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[colors](https://nim-lang.org/docs/colors.html)"
msgstr "[colors](https://nim-lang.org/docs/colors.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "MD5"
msgstr "MD5"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "hashlib.md5"
msgstr "hashlib.md5"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[md5](https://nim-lang.org/docs/md5.html)"
msgstr "[md5](https://nim-lang.org/docs/md5.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "SHA1"
msgstr "SHA1"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "hashlib.sha1"
msgstr "hashlib.sha1"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[sha1](https://nim-lang.org/docs/sha1.html)"
msgstr "[sha1](https://nim-lang.org/docs/sha1.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "HTTP Server"
msgstr "Servidor HTTP"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "http.server"
msgstr "http.server"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[asynchttpserver](https://nim-lang.org/docs/asynchttpserver.html)"
msgstr "[asynchttpserver](https://nim-lang.org/docs/asynchttpserver.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Lexer"
msgstr "Lexer"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "shlex"
msgstr "shlex"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[lexbase](https://nim-lang.org/docs/lexbase.html)"
msgstr "[lexbase](https://nim-lang.org/docs/lexbase.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Multi-Threading"
msgstr "Multi-Threading"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "threading"
msgstr "threading"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[threadpool](https://nim-lang.org/docs/threadpool.html)"
msgstr "[threadpool](https://nim-lang.org/docs/threadpool.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "URL & URI"
msgstr "URL E URI"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "urllib.parse"
msgstr "urllib.parse"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[uri](https://nim-lang.org/docs/uri.html)"
msgstr "[uri](https://nim-lang.org/docs/uri.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "CSV"
msgstr "CSV"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "csv"
msgstr "csv"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[parsecsv](https://nim-lang.org/docs/parsecsv.html)"
msgstr "[parsecsv](https://nim-lang.org/docs/parsecsv.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Parse command line arguments"
msgstr "Parâmetros da linha de comando"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "argparse"
msgstr "argparse"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[parseopt](https://nim-lang.org/docs/parseopt.html)"
msgstr "[parseopt](https://nim-lang.org/docs/parseopt.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "SMTP"
msgstr "SMTP"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "smtplib"
msgstr "smtplib"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[smtp](https://nim-lang.org/docs/smtp.html)"
msgstr "[smtp](https://nim-lang.org/docs/smtp.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "HTTP Cookies"
msgstr "Cookies HTTP"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "http.cookies"
msgstr "http.cookies"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[cookies](https://nim-lang.org/docs/cookies.html)"
msgstr "[cookies](https://nim-lang.org/docs/cookies.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Statistics"
msgstr "Estatísticas"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "statistics"
msgstr "statistics"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[stats](https://nim-lang.org/docs/stats.html)"
msgstr "[stats](https://nim-lang.org/docs/stats.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Text wrapping"
msgstr "Empacotamento de texto (Text Wrapping)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "textwrap"
msgstr "textwrap"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[wordwrap](https://nim-lang.org/docs/wordwrap.html)"
msgstr "[wordwrap](https://nim-lang.org/docs/wordwrap.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Windows Registry"
msgstr "Registro do Windows"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "winreg"
msgstr "winreg"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[registry](https://nim-lang.org/docs/registry.html)"
msgstr "[registry](https://nim-lang.org/docs/registry.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "POSIX"
msgstr "POSIX"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "posix"
msgstr "posix"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid ""
"[posix](https://nim-lang.org/docs/posix.html), [posix_utils](https://nim-lang.org/"
"docs/posix_utils.html)"
msgstr ""
"[posix](https://nim-lang.org/docs/posix.html), [posix_utils](https://nim-lang.org/"
"docs/posix_utils.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "SSL"
msgstr "SSL"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "ssl"
msgstr "ssl"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[openssl](https://nim-lang.org/docs/openssl.html)"
msgstr "[openssl](https://nim-lang.org/docs/openssl.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "CGI"
msgstr "CGI"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "cgi"
msgstr "cgi"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[cgi](https://nim-lang.org/docs/cgi.html)"
msgstr "[cgi](https://nim-lang.org/docs/cgi.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Profiler"
msgstr "Profiler"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "cprofile, profile"
msgstr "cprofile, profile"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[nimprof](https://nim-lang.github.io/Nim/nimprof.html)"
msgstr "[nimprof](https://nim-lang.github.io/Nim/nimprof.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Monotonic time"
msgstr "Tempo monotônico"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "time.monotonic"
msgstr "time.monotonic"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[monotimes](https://nim-lang.github.io/Nim/monotimes.html)"
msgstr "[monotimes](https://nim-lang.github.io/Nim/monotimes.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Run functions at exit"
msgstr "Executar funções na saída"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "atexit"
msgstr "atexit"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[exitprocs](https://nim-lang.github.io/Nim/exitprocs.html)"
msgstr "[exitprocs](https://nim-lang.github.io/Nim/exitprocs.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Set file permissions"
msgstr "Definir permissões de arquivo"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "os, stat"
msgstr "os, stat"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid ""
"[os](https://nim-lang.github.io/Nim/os.html), [filepermissions](https://nim-lang."
"github.io/Nim/filepermissions.html)"
msgstr ""
"[os](https://nim-lang.github.io/Nim/os.html), [filepermissions](https://nim-lang."
"github.io/Nim/filepermissions.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Recursive walk of filesystem"
msgstr "Percurso recursivo do sistema de arquivos"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "os.walk"
msgstr "os.walk"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid ""
"[os.walkDirRec](https://nim-lang.github.io/Nim/os.html#walkDirRec.i%2Cstring), "
"[globs.walkDirRecFilter](https://nim-lang.github.io/Nim/globs."
"html#walkDirRecFilter.i%2Cstring%2Cproc%28PathEntry%29)"
msgstr ""
"[os.walkDirRec](https://nim-lang.github.io/Nim/os.html#walkDirRec.i%2Cstring), "
"[globs.walkDirRecFilter](https://nim-lang.github.io/Nim/globs."
"html#walkDirRecFilter.i%2Cstring%2Cproc%28PathEntry%29)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Templating engine"
msgstr "Mecanismo de modelagem"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "string.Template"
msgstr "string.Template"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[Source Code Filters](https://nim-lang.github.io/Nim/filters.html)"
msgstr "[Source Code Filters](https://nim-lang.github.io/Nim/filters.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Deques"
msgstr "Deques"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "collections.deque"
msgstr "collections.deque"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[deques](https://nim-lang.github.io/Nim/deques.html)"
msgstr "[deques](https://nim-lang.github.io/Nim/deques.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "B-Tree based ordered Dictionary"
msgstr "Dicionário ordenado baseado na árvore B"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[btreetables](https://nim-lang.github.io/Nim/btreetables.html)"
msgstr "[btreetables](https://nim-lang.github.io/Nim/btreetables.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Critical Bit Tree Dict/Set"
msgstr "Critical Bit Tree Dict/Set"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[critbits](https://nim-lang.github.io/Nim/critbits.html)"
msgstr "[critbits](https://nim-lang.github.io/Nim/critbits.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Pooled Memory Allocation"
msgstr "Alocação de memória agrupada"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[pools](https://nim-lang.github.io/Nim/pools.html)"
msgstr "[pools](https://nim-lang.github.io/Nim/pools.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Parse JSON"
msgstr "Analisar JSON"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "json"
msgstr "json"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid ""
"[parsejson](https://nim-lang.org/docs/parsejson.html), [json](https://nim-lang."
"org/docs/json.html)"
msgstr ""
"[parsejson](https://nim-lang.org/docs/parsejson.html), [json](https://nim-lang."
"org/docs/json.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Parse INI"
msgstr "Analisar INI"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "configparser"
msgstr "configparser"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[parsecfg](https://nim-lang.org/docs/parsecfg.html)"
msgstr "[parsecfg](https://nim-lang.org/docs/parsecfg.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Parse XML"
msgstr "Analisar XML"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "xml"
msgstr "xml"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid ""
"[parsexml](https://nim-lang.org/docs/parsexml.html), [xmltree](https://nim-lang."
"org/docs/xmltree.html)"
msgstr ""
"[parsexml](https://nim-lang.org/docs/parsexml.html), [xmltree](https://nim-lang."
"org/docs/xmltree.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Parse HTML"
msgstr "Analisar HTML"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "html.parser"
msgstr "html.parser"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[htmlparser](https://nim-lang.org/docs/htmlparser.html)"
msgstr "[htmlparser](https://nim-lang.org/docs/htmlparser.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Parse SQL"
msgstr "Analisar SQL"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[parsesql](https://nim-lang.org/docs/parsesql.html)"
msgstr "[parsesql](https://nim-lang.org/docs/parsesql.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Colors on the Terminal"
msgstr "Cores no terminal"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[terminal](https://nim-lang.org/docs/terminal.html)"
msgstr "[terminal](https://nim-lang.org/docs/terminal.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Linux Distro Detection"
msgstr "Detecção de distribuição Linux"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[distros](https://nim-lang.org/docs/distros.html)"
msgstr "[distros](https://nim-lang.org/docs/distros.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "HTML Generator"
msgstr "Gerador de HTML"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[htmlgen](https://nim-lang.org/docs/htmlgen.html)"
msgstr "[htmlgen](https://nim-lang.org/docs/htmlgen.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Arrow Functions"
msgstr "Funções de seta (arrow)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[sugar](https://nim-lang.org/docs/sugar.html#%3D%3E.m%2Cuntyped%2Cuntyped)"
msgstr "[sugar](https://nim-lang.org/docs/sugar.html#%3D%3E.m%2Cuntyped%2Cuntyped)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "In-Place to Work-on-Copy"
msgstr "In-Place para Work-on-Copy"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid ""
"[sugar.dup](https://nim-lang.org/docs/sugar.html#dup.m%2CT%2Cvarargs%5Buntyped%5D)"
msgstr ""
"[sugar.dup](https://nim-lang.org/docs/sugar.html#dup.m%2CT%2Cvarargs%5Buntyped%5D)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "Syntax Sugar"
msgstr "Sintaxe Sugar"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "[sugar](https://nim-lang.org/docs/sugar.html)"
msgstr "[sugar](https://nim-lang.org/docs/sugar.html)"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid "JavaScript & Frontend"
msgstr "JavaScript e frontend"

#: Nim-for-Python-Programmers.md:block 273 (table)
msgid ""
"[dom](https://nim-lang.org/docs/dom.html), [asyncjs](https://nim-lang.org/docs/"
"asyncjs.html), [jscore](https://nim-lang.org/docs/jscore.html), [jsffi](https://"
"nim-lang.org/docs/jsffi.html), [dom_extensions](https://nim-lang.github.io/Nim/"
"dom_extensions.html), [jsre](https://nim-lang.github.io/Nim/jsre.html)"
msgstr ""
"[dom](https://nim-lang.org/docs/dom.html), [asyncjs](https://nim-lang.org/docs/"
"asyncjs.html), [jscore](https://nim-lang.org/docs/jscore.html), [jsffi](https://"
"nim-lang.org/docs/jsffi.html), [dom_extensions](https://nim-lang.github.io/Nim/"
"dom_extensions.html), [jsre](https://nim-lang.github.io/Nim/jsre.html)"

#: Nim-for-Python-Programmers.md:block 274 (unordered list)
msgid ""
"This is not complete, but just a quick overview. For more information see https://"
"nim-lang.org/docs/lib.html"
msgstr ""
"Isso não está completo, mas apenas uma visão geral rápida. Para obter mais "
"informações, consulte https://nim-lang.org/docs/lib.html"

#: Nim-for-Python-Programmers.md:block 275 (header)
msgid "Tuples"
msgstr "Tuplas"

#: Nim-for-Python-Programmers.md:block 276 (paragraph)
msgid ""
"Tuples are fixed size, start at index `0`, can contain mixed types, and can be "
"anonymous or named. Named tuples have no extra overhead over anonymous tuples."
msgstr ""
"As tuplas têm tamanho fixo, começam no índice `0`, podem conter tipos mistos e "
"podem ser anônimas ou nomeadas. Tuplas nomeadas não têm nenhuma sobrecarga extra "
"sobre tuplas anônimas."

#: Nim-for-Python-Programmers.md:block 277 (header)
msgid "Anonymous Tuple"
msgstr "Tupla anônima"

#: Nim-for-Python-Programmers.md:block 281 (header)
msgid "Named Tuple"
msgstr "Tuple Nomeada"

#: Nim-for-Python-Programmers.md:block 282 (unordered list)
msgid ""
"Nim allows the fields to be named, without requiring the tuple itself to be "
"named. Python NamedTuple requires `import collections`, and we need to give it a "
"dummy underscore name:"
msgstr ""
"O Nim permite que os campos sejam nomeados, sem exigir que a própria tupla seja "
"nomeada. O Python NamedTuple requer `import collections`, e precisamos dar a ele "
"um nome fictício de sublinhado:"

#: Nim-for-Python-Programmers.md:block 287 (unordered list)
msgid "We can also name both the fields and the tuple:"
msgstr "Também podemos nomear os campos e a tupla:"

#: Nim-for-Python-Programmers.md:block 291 (paragraph)
msgid ""
"`tuple[key0: string, key1: int]` is the `typedesc` for Declarations. `(key0: "
"\"foo\", key1: 42)` is the Literal for Assigns."
msgstr ""
"`tuple [key0: string, key1: int] `é o `typedesc` para Declarações. `(key0: “foo”, "
"key1:42)` é o literal para atribuições."

#: Nim-for-Python-Programmers.md:block 292 (paragraph)
msgid ""
"Nim tuples are a lot like Python NamedTuple in that the tuple members have names."
msgstr ""
"As tuplas do Nim são muito parecidas com Python NamedTuple, pois os membros da "
"tupla têm nomes."

#: Nim-for-Python-Programmers.md:block 293 (paragraph)
msgid ""
"Do NOT use named tuples to \"mimic\" proper objects (the compiler re-uses generic "
"instantiations for \"identical\" tuples)."
msgstr ""
"NÃO use tuplas nomeadas para “imitar” objetos apropriados (o compilador reutiliza "
"instanciações genéricas para tuplas “idênticas”)."

#: Nim-for-Python-Programmers.md:block 294 (paragraph)
msgid ""
"See [manual](http://nim-lang.org/docs/manual.html#types-tuples-and-object-types) "
"for a more in depth look at tuples."
msgstr ""
"Veja [manual](http://nim-lang.org/docs/manual.html#types-tuples-and-object-types) "
"para uma análise mais aprofundada das tuplas."

#: Nim-for-Python-Programmers.md:block 295 (header)
msgid "Lists"
msgstr "Listas"

#: Nim-for-Python-Programmers.md:block 296 (paragraph)
msgid ""
"[Nim sequences](http://nim-lang.org/docs/tut1.html#advanced-types-sequences) are "
"*not* fixed size. They can grow and shrink, start at index `0`, and must contain "
"elements all of the same type."
msgstr ""
"[Nim sequences](http://nim-lang.org/docs/tut1.html#advanced-types-sequences) "
"*não* são de tamanho fixo. Eles podem crescer e encolher, começar no índice `0` e "
"devem conter elementos do mesmo tipo."

#: Nim-for-Python-Programmers.md:block 300 (paragraph)
msgid ""
"[@](https://nim-lang.github.io/Nim/system.html#%40%2CopenArray%5BT%5D) is a "
"function that converts from `array` to `seq`."
msgstr ""
"[@](https://nim-lang.github.io/Nim/system.html#%40%2CopenArray%5BT%5D) é uma "
"função que converte de `array` para `seq`."

#: Nim-for-Python-Programmers.md:block 301 (header)
msgid "List Comprehensions"
msgstr "List Comprehensions"

#: Nim-for-Python-Programmers.md:block 305 (paragraph)
msgid ""
"A comprehension can be assigned to `const` too, and it will run at compile-time."
msgstr ""
"Uma comprehension também pode ser atribuída a `const` e será executada em tempo "
"de compilação."

#: Nim-for-Python-Programmers.md:block 306 (paragraph)
msgid ""
"The comprehension is implemented as a `macro` that is expanded at compile-time, "
"you can see the expanded code using the `--expandMacro` compiler option:"
msgstr ""
"A comprehension é implementada como uma `macro` que é expandida em tempo de "
"compilação. Você pode ver o código expandido usando a opção de compilador `—"
"expandMacro`:"

#: Nim-for-Python-Programmers.md:block 308 (paragraph)
msgid ""
"The comprehensions can be nested, multi-line, multi-expression, all with zero "
"overhead:"
msgstr ""
"As comprehension podem ser aninhadas, com várias linhas e com várias expressões, "
"tudo sem sobrecarga:"

#: Nim-for-Python-Programmers.md:block 310 (paragraph)
msgid "Single-line example:"
msgstr "Exemplo de linha única:"

#: Nim-for-Python-Programmers.md:block 314 (paragraph)
msgid ""
"Python comprehensions convert the code to a generator, but Nim comprehensions do "
"not convert the code to an iterator:"
msgstr ""
"As comprehension de Python convertem o código em um gerador, mas as compreensões "
"de Nim não convertem o código em um iterador:"

#: Nim-for-Python-Programmers.md:block 316 (paragraph)
msgid ""
":arrow_up: Nim :arrow_up: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :"
"arrow_down: Python :arrow_down:"
msgstr ""
":arrow_up: Nim :arrow_up: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :"
"arrow_down: Python :arrow_down:"

#: Nim-for-Python-Programmers.md:block 318 (paragraph)
msgid "Python complains:"
msgstr "Python reclama:"

#: Nim-for-Python-Programmers.md:block 320 (paragraph)
msgid ""
"Some things that in Python are syntactically disallowed inside comprehensions "
"(like `return`) are allowed in Nim. This is because Nim comprehensions are just "
"macros that expand to normal code."
msgstr ""
"Algumas coisas que em Python são sintaticamente proibidas dentro de compreensões "
"(como `return`) são permitidas no Nim. Isso ocorre porque as compreensões do Nim "
"são apenas macros que se expandem para o código normal."

#: Nim-for-Python-Programmers.md:block 321 (unordered list)
msgid "Whats `collect()`?."
msgstr "O que é `collect () `?."

#: Nim-for-Python-Programmers.md:block 322 (paragraph)
msgid ""
"[collect](https://nim-lang.github.io/Nim/sugar.html#collect."
"m%2Cuntyped%2Cuntyped) takes as argument whatever your returning type uses as the "
"constructor."
msgstr ""
"[collect](https://nim-lang.github.io/Nim/sugar.html#collect."
"m%2Cuntyped%2Cuntyped) takes as argument whatever your returning type uses as the "
"constructor."

#: Nim-for-Python-Programmers.md:block 323 (header)
msgid "Dict Comprehensions"
msgstr "Dict Comprehensions"

#: Nim-for-Python-Programmers.md:block 327 (unordered list)
#, fuzzy
msgid ""
"`collect()` requires [`import std/sugar`.](https://nim-lang.github.io/Nim/sugar."
"html#collect.m%2Cuntyped%2Cuntyped)"
msgstr ""
"`collect () `requer [`import std/sugar`.](https://nim-lang.github.io/Nim/sugar."
"html#collect.m%2Cuntyped%2Cuntyped)"

#: Nim-for-Python-Programmers.md:block 328 (header)
msgid "Set Comprehensions"
msgstr "Set Comprehensions"

#: Nim-for-Python-Programmers.md:block 333 (header)
msgid "Sets"
msgstr "Conjuntos (sets)"

#: Nim-for-Python-Programmers.md:block 334 (table)
msgid "Set"
msgstr "Conjunto (set)"

#: Nim-for-Python-Programmers.md:block 334 (table)
msgid "Ordered Set"
msgstr "Set ordenado"

#: Nim-for-Python-Programmers.md:block 334 (table)
msgid "Bitset"
msgstr "Bitset"

#: Nim-for-Python-Programmers.md:block 334 (table)
msgid "[Bit Fields](https://en.wikipedia.org/wiki/Bit_field)"
msgstr "[Bit Fields](https://en.wikipedia.org/wiki/Bit_field)"

#: Nim-for-Python-Programmers.md:block 334 (table)
msgid "`set()`"
msgstr "`set()`"

#: Nim-for-Python-Programmers.md:block 334 (table)
msgid "[`HashSet()`](https://nim-lang.github.io/Nim/sets.html#HashSet)"
msgstr "[`HashSet()`](https://nim-lang.github.io/Nim/sets.html#HashSet)"

#: Nim-for-Python-Programmers.md:block 334 (table)
msgid "[`OrderedSet()`](https://nim-lang.github.io/Nim/sets.html#OrderedSet)"
msgstr "[`OrderedSet()`](https://nim-lang.github.io/Nim/sets.html#OrderedSet)"

#: Nim-for-Python-Programmers.md:block 334 (table)
msgid "[`set`](http://nim-lang.org/docs/manual.html#types-set-type)"
msgstr "[`set`](http://nim-lang.org/docs/manual.html#types-set-type)"

#: Nim-for-Python-Programmers.md:block 334 (table)
msgid "[Bit Fields](https://nim-lang.org/docs/manual.html#set-type-bit-fields)"
msgstr "[Bit Fields](https://nim-lang.org/docs/manual.html#set-type-bit-fields)"

#: Nim-for-Python-Programmers.md:block 334 (table)
msgid "`import std/sets`"
msgstr "`import std/sets`"

#: Nim-for-Python-Programmers.md:block 335 (unordered list)
msgid ""
"**Python Set can be replaced with [HashSet](http://nim-lang.org/docs/sets.html).**"
msgstr ""
"**O Python set pode ser substituído por [HashSet](http://nim-lang.org/docs/sets."
"html) .**"

#: Nim-for-Python-Programmers.md:block 336 (paragraph)
msgid ""
"Python sets are not like the [Nim set type](http://nim-lang.org/docs/manual."
"html#types-set-type). The \"default\" set is a [bitset](https://en.wikipedia.org/"
"wiki/Bitset). For every possible value of the contained type, it stores 1 bit "
"indicating whether it is present in the set. This means you should use it if the "
"type has a finite, limited range of possible values. If all of the possible "
"values are also known at compile-time, you can create an `Enum` for them."
msgstr ""
"Os conjuntos Python não são como o [tipo de conjunto Nim](http://nim-lang.org/"
"docs/manual.html#types-set-type). O conjunto “padrão” é um [bitset](https://en."
"wikipedia.org/wiki/Bitset). Para cada valor possível do tipo contido, ele "
"armazena 1 bit indicando se ele está presente no conjunto. Isso significa que "
"você deve usá-lo se o tipo tiver uma faixa finita e limitada de valores "
"possíveis. Se todos os valores possíveis também forem conhecidos em tempo de "
"compilação, você poderá criar um `Enum` para eles."

#: Nim-for-Python-Programmers.md:block 337 (paragraph)
msgid ""
"The biggest integer you can fit on a set normally is `65535` equals to "
"`high(uint16)`."
msgstr ""
"O maior número inteiro que você pode caber em um conjunto normalmente é `65535` "
"igual a `high (uint16) `."

#: Nim-for-Python-Programmers.md:block 338 (paragraph)
msgid ""
"You can fit bigger integers using an integer Subrange, if you don't need small "
"integers. An example really stressing set to fit `2_147_483_647` equals to "
"`high(int32)` on a set at compile-time:"
msgstr ""
"Você pode ajustar números inteiros maiores usando um Subrange inteiro, se não "
"precisar de números inteiros pequenos. Um exemplo realmente estressante de "
"definir para caber `2_147_483_647` é igual a `high (int32) `em um conjunto em "
"tempo de compilação:"

#: Nim-for-Python-Programmers.md:block 340 (paragraph)
msgid ""
"The basic Nim set type is fast and memory-efficient, compared to the [HashSet]"
"(http://nim-lang.org/docs/sets.html) which is implemented as a dictionary. For "
"simple flag types and small mathematical sets, use set. For larger collections, "
"or if you are just learning, use HashSet."
msgstr ""
"O tipo de conjunto (set) básico do Nim é rápido e economiza memória, em "
"comparação com o [HashSet](http://nim-lang.org/docs/sets.html), que é "
"implementado como um dicionário. Para tipos de flags simples e pequenos conjuntos "
"matemáticos, use set. Para coleções maiores, ou se você está apenas aprendendo, "
"use o HashSet."

#: Nim-for-Python-Programmers.md:block 341 (header)
msgid "Dictionaries"
msgstr "Dicionários"

#: Nim-for-Python-Programmers.md:block 342 (paragraph)
msgid "Use [tables](http://nim-lang.org/docs/tables.html) for Python-like dicts."
msgstr ""
"Use [tables](http://nim-lang.org/docs/tables.html) para dicionários semelhantes "
"ao Python."

#: Nim-for-Python-Programmers.md:block 343 (table)
msgid "Dictionary"
msgstr "Dicionário"

#: Nim-for-Python-Programmers.md:block 343 (table)
msgid "Ordered Dictionary"
msgstr "Dicionário ordenado"

#: Nim-for-Python-Programmers.md:block 343 (table)
msgid "Counter"
msgstr "Counter"

#: Nim-for-Python-Programmers.md:block 343 (table)
msgid "`dict()`"
msgstr "`dict()`"

#: Nim-for-Python-Programmers.md:block 343 (table)
msgid "`OrderedDict()`"
msgstr "`OrderedDict()`"

#: Nim-for-Python-Programmers.md:block 343 (table)
msgid "`Counter()`"
msgstr "`Counter()`"

#: Nim-for-Python-Programmers.md:block 343 (table)
msgid "`import std/collections`"
msgstr "`import std/collections`"

#: Nim-for-Python-Programmers.md:block 343 (table)
msgid "[`Table()`](https://nim-lang.org/docs/tables.html#basic-usage-table)"
msgstr "[`Table()`](https://nim-lang.org/docs/tables.html#basic-usage-table)"

#: Nim-for-Python-Programmers.md:block 343 (table)
msgid ""
"[`OrderedTable()`](https://nim-lang.org/docs/tables.html#basic-usage-orderedtable)"
msgstr ""
"[`OrderedTable()`](https://nim-lang.org/docs/tables.html#basic-usage-orderedtable)"

#: Nim-for-Python-Programmers.md:block 343 (table)
msgid ""
"[`CountTable()`](https://nim-lang.org/docs/tables.html#basic-usage-counttable)"
msgstr ""
"[`CountTable()`](https://nim-lang.org/docs/tables.html#basic-usage-counttable)"

#: Nim-for-Python-Programmers.md:block 343 (table)
msgid "`import std/tables`"
msgstr "`import std/tables`"

#: Nim-for-Python-Programmers.md:block 344 (header)
msgid "Table Constructors"
msgstr "Construtores de tabela"

#: Nim-for-Python-Programmers.md:block 352 (header)
msgid "Counters"
msgstr "Contadores"

#: Nim-for-Python-Programmers.md:block 356 (paragraph)
msgid "**Examples:**"
msgstr "**Exemplos: **"

#: Nim-for-Python-Programmers.md:block 358 (paragraph)
msgid "Tables are just syntax sugar for an array of tuples:"
msgstr "As tabelas são apenas açúcar de sintaxe para uma matriz de tuplas:"

#: Nim-for-Python-Programmers.md:block 360 (header)
msgid "B-Tree Tables"
msgstr "Tabelas Árvores-B"

#: Nim-for-Python-Programmers.md:block 361 (paragraph)
msgid ""
"[B-Tree based generic sorted Tables](https://nim-lang.github.io/Nim/btreetables."
"html) using the same API."
msgstr ""
"[Tabelas ordenadas genéricas baseadas em Árvore-B](https://nim-lang.github.io/Nim/"
"btreetables.html) usando a mesma API."

#: Nim-for-Python-Programmers.md:block 363 (unordered list)
msgid "[Whats B-Tree ? (Wikipedia).](https://en.wikipedia.org/wiki/B-tree)"
msgstr "[O que é B-Tree? (Wikipédia).](https://en.wikipedia.org/wiki/B-tree)"

#: Nim-for-Python-Programmers.md:block 363 (unordered list)
msgid "[Whats B-Tree ? (1 Minute Animated Video).](https://youtu.be/coRJrcIYbF4)"
msgstr ""
"[O que é B-Tree? (Vídeo animado de 1 minuto).](https://youtu.be/coRJrcIYbF4)"

#: Nim-for-Python-Programmers.md:block 364 (header)
msgid "Ternary operators"
msgstr "Operadores ternários"

#: Nim-for-Python-Programmers.md:block 368 (paragraph)
msgid ""
"In Nim the \"ternary operator\" is simply an `if..else` inline. Unlike Python, "
"the ordinary `if..else` is an expression, so it can be assigned to a variable. "
"These snippets are equivalent:"
msgstr ""
"Em Nim, o “operador ternário” é simplesmente um `if.. else` em linha. Ao "
"contrário do Python, o `if.. else` comum é uma expressão, portanto, ele pode ser "
"atribuído a uma variável. Esses trechos são equivalentes:"

#: Nim-for-Python-Programmers.md:block 371 (header)
msgid "Reading and writing files"
msgstr "Lendo e escrevendo arquivos"

#: Nim-for-Python-Programmers.md:block 372 (paragraph)
msgid "**Reading files line by line**"
msgstr "**Lendo arquivos linha por linha**"

#: Nim-for-Python-Programmers.md:block 376 (unordered list)
msgid "`lines()` Documentation https://nim-lang.org/docs/io.html#lines.i%2Cstring"
msgstr "`lines()` Documentação https://nim-lang.org/docs/io.html#lines.i%2Cstring"

#: Nim-for-Python-Programmers.md:block 377 (paragraph)
msgid "**Reading and writing files:**"
msgstr "**Lendo e gravando arquivos: **"

#: Nim-for-Python-Programmers.md:block 379 (paragraph)
msgid "**Reading files at compile-time:**"
msgstr "**Lendo arquivos em tempo de compilação: **"

#: Nim-for-Python-Programmers.md:block 381 (header)
msgid "Change File Permissions"
msgstr "Alterar permissões de arquivo"

#: Nim-for-Python-Programmers.md:block 385 (paragraph)
msgid ""
"These examples assume a file `\"file.txt\"` exists. [Both use the octal Unix file "
"permissions.](https://en.wikipedia.org/wiki/File-"
"system_permissions#Notation_of_traditional_Unix_permissions) [Also a lower level "
"API is available on `os` module.](https://nim-lang.github.io/Nim/os."
"html#setFilePermissions%2Cstring%2Cset%5BFilePermission%5D)"
msgstr ""
"Esses exemplos assumem que existe um arquivo `” file.txt “`. [Ambos usam as "
"permissões octais de arquivo Unix.](https://en.wikipedia.org/wiki/File-"
"system_permissions#Notation_of_traditional_Unix_permissions) [Além disso, uma API "
"de nível inferior está disponível no módulo `os`.](https://nim-lang.github.io/Nim/"
"os.html#setFilePermissions%2Cstring%2Cset%5BFilePermission%5D)"

#: Nim-for-Python-Programmers.md:block 386 (paragraph)
msgid "See https://nim-lang.github.io/fusion/src/fusion/filepermissions.html"
msgstr "Veja https://nim-lang.github.io/fusion/src/fusion/filepermissions.html"

#: Nim-for-Python-Programmers.md:block 387 (header)
msgid "Temporarily Change Folder"
msgstr "Alterar pasta temporariamente"

#: Nim-for-Python-Programmers.md:block 391 (paragraph)
msgid ""
"These examples assume a folder `\"subfolder\"` exists. Python optionally has "
"third-party dependencies which do the same thing; the examples use the standard "
"library. Some Python third-party dependencies may convert the code inside "
"`withDir` to a generator, forcing you to change the code (like `return` to "
"`yield` etc), examples use standard library."
msgstr ""
"Esses exemplos assumem que existe uma pasta `\"subfolder\"`. Opcionalmente, o "
"Python tem dependências de terceiros que fazem a mesma coisa; os exemplos usam a "
"biblioteca padrão. Algumas dependências de terceiros do Python podem converter o "
"código dentro de `withDir` em um gerador, forçando você a alterar o código (como "
"`return` para `yield` etc), exemplos usam biblioteca padrão."

#: Nim-for-Python-Programmers.md:block 392 (paragraph)
msgid "See https://nim-lang.github.io/fusion/src/fusion/scripting.html"
msgstr "Veja https://nim-lang.github.io/fusion/src/fusion/scripting.html"

#: Nim-for-Python-Programmers.md:block 393 (header)
msgid "Map & Filter"
msgstr "Map e filter"

#: Nim-for-Python-Programmers.md:block 397 (unordered list)
msgid ""
"map and filter operations require [`import std/sequtils`.](https://nim-lang.org/"
"docs/sequtils.html)"
msgstr ""
"operações de map e filter requerem [`import std/sequtils`.](https://nim-lang.org/"
"docs/sequtils.html)"

#: Nim-for-Python-Programmers.md:block 398 (header)
msgid "Lambdas"
msgstr "Lambdas"

#: Nim-for-Python-Programmers.md:block 402 (paragraph)
msgid "Multi-line example:"
msgstr "Exemplo em várias linhas:"

#: Nim-for-Python-Programmers.md:block 404 (paragraph)
msgid "Python anonymous functions can not use `return`, but it just works in Nim:"
msgstr "As funções anônimas do Python não podem usar `return`, mas podem no Nim:"

#: Nim-for-Python-Programmers.md:block 406 (paragraph)
msgid "Complains `SyntaxError: invalid syntax`."
msgstr "Reclamações `SyntaxError: sintaxe inválida`."

#: Nim-for-Python-Programmers.md:block 409 (paragraph)
msgid "Python anonymous functions can not use `yield`, but it just works in Nim:"
msgstr "As funções anônimas do Python não podem usar `yield`, mas podem  no Nim:"

#: Nim-for-Python-Programmers.md:block 414 (paragraph)
msgid ""
"[Anonymous procs in Nim](https://nim-lang.org/docs/manual.html#procedures-"
"anonymous-procs) are basically functions without a name."
msgstr ""
"[Processos anônimos em Nim](https://nim-lang.org/docs/manual.html#procedures-"
"anonymous-procs) são basicamente funções sem nome."

#: Nim-for-Python-Programmers.md:block 415 (header)
msgid "Decorators"
msgstr "Decoradores"

#: Nim-for-Python-Programmers.md:block 416 (unordered list)
msgid "Templates and macros can be used similarly to Python's decorators."
msgstr ""
"Modelos e macros podem ser usados de forma semelhante aos decoradores do Python."

#: Nim-for-Python-Programmers.md:block 420 (unordered list)
msgid "Why doesn't Nim use `@decorator` syntax?."
msgstr "Por que o Nim não usa a sintaxe `@decorator`?."

#: Nim-for-Python-Programmers.md:block 421 (paragraph)
msgid "Nim uses `{.` and `.}` because it can have several decorators together."
msgstr "Nim usa `{.` e`.} `porque pode ter vários decoradores juntos."

#: Nim-for-Python-Programmers.md:block 422 (paragraph)
msgid "Also in Nim one works on variables and types:"
msgstr "Também no Nim, trabalha-se com variáveis e tipos:"

#: Nim-for-Python-Programmers.md:block 425 (header)
msgid "JSON"
msgstr "JSON"

#: Nim-for-Python-Programmers.md:block 426 (paragraph)
msgid ""
"Python uses multi-line strings with JSON inside, Nim uses literal JSON directly "
"in the code."
msgstr ""
"Python usa strings de várias linhas com JSON interno, Nim usa JSON literal "
"diretamente no código."

#: Nim-for-Python-Programmers.md:block 430 (unordered list)
msgid ""
"`%*` converts everything inside the braces to JSON, JSON has a type `JsonNode`."
msgstr ""
"`%*` converte tudo dentro dos colchetes em JSON, o JSON tem um tipo `JsonNode`."

#: Nim-for-Python-Programmers.md:block 430 (unordered list)
msgid "`%*` can have variables and literals inside the braces."
msgstr "`%*` pode ter variáveis e literais dentro dos colchetes."

#: Nim-for-Python-Programmers.md:block 430 (unordered list)
msgid "JSON can have Nim comments inside the braces of `%*`."
msgstr "O JSON pode ter comentários de Nim entre colchetes de `%*`."

#: Nim-for-Python-Programmers.md:block 430 (unordered list)
msgid "If the JSON is not valid JSON, the code will not compile."
msgstr "Se o JSON não for um JSON válido, o código não será compilado."

#: Nim-for-Python-Programmers.md:block 430 (unordered list)
msgid ""
"`JsonNode` can be useful in Nim because is a type that can have [mixed types]"
"(https://nim-lang.github.io/Nim/manual.html#types-object-variants) and can grow/"
"shrink."
msgstr ""
"`JsonNode` pode ser útil no Nim porque é um tipo que pode ter [tipos mistos]"
"(https://nim-lang.github.io/Nim/manual.html#types-object-variants) e pode crescer/"
"encolher."

#: Nim-for-Python-Programmers.md:block 430 (unordered list)
msgid "You can read JSON at compile-time, and store it in a constant as a string."
msgstr ""
"Você pode ler o JSON em tempo de compilação e armazená-lo em uma constante como "
"uma string."

#: Nim-for-Python-Programmers.md:block 430 (unordered list)
msgid "To parse JSON from a string you can use `parseJson(\"{}\")`."
msgstr ""
"Para analisar o JSON a partir de uma string, você pode usar `parseJSON(“{}”) `."

#: Nim-for-Python-Programmers.md:block 430 (unordered list)
msgid "To parse JSON from a file use `parseFile(\"file.json\")`."
msgstr "Para analisar o JSON de um arquivo, use `parseFile(“file.json”) `."

#: Nim-for-Python-Programmers.md:block 430 (unordered list)
msgid "[JSON documentation](https://nim-lang.org/docs/json.html)"
msgstr "[Documentação JSON](https://nim-lang.org/docs/json.html)"

#: Nim-for-Python-Programmers.md:block 431 (header)
msgid "Self-Execution of Main Module"
msgstr "Auto-execução do módulo principal"

#: Nim-for-Python-Programmers.md:block 439 (unordered list)
msgid "[Unittest documentation.](https://nim-lang.org/docs/unittest.html)"
msgstr "[Documentação do Unittest.](https://nim-lang.org/docs/unittest.html)"

#: Nim-for-Python-Programmers.md:block 439 (unordered list)
msgid ""
"[The Nimble package manager can also run Unittests.](https://github.com/nim-lang/"
"nimble#nimble-tasks)"
msgstr ""
"[O gerenciador de pacotes Nimble também pode executar Unittests.](https://github."
"com/nim-lang/nimble#nimble-tasks)"

#: Nim-for-Python-Programmers.md:block 439 (unordered list)
msgid "[NimScript can also run Unittests.](https://nim-lang.org/docs/nims.html)"
msgstr ""
"[O NIMScript também pode executar Unittests.](https://nim-lang.org/docs/nims.html)"

#: Nim-for-Python-Programmers.md:block 439 (unordered list)
msgid ""
"[You can run documentation as Unittests with `runnableExamples`](https://nim-lang."
"org/docs/system.html#runnableExamples%2Cuntyped)."
msgstr ""
"[Você pode executar a documentação como Unittests com `runnableExamples`](https://"
"nim-lang.org/docs/system.html#runnableExamples%2Cuntyped)."

#: Nim-for-Python-Programmers.md:block 440 (header)
msgid "Assert with customized messages"
msgstr "Assert com mensagens personalizadas"

#: Nim-for-Python-Programmers.md:block 441 (unordered list)
msgid ""
"`assert` can take a `block`. You can customize the message for better user "
"experience:"
msgstr ""
"`assert` pode ter um `block`. Você pode personalizar a mensagem para melhorar a "
"experiência do usuário:"

#: Nim-for-Python-Programmers.md:block 443 (header)
msgid "Testament"
msgstr "Testamento"

#: Nim-for-Python-Programmers.md:block 444 (paragraph)
msgid ""
"An alternative to `unittest`. It is prepared for big projects and has more "
"features."
msgstr ""
"Uma alternativa ao `unittest`. Está preparado para grandes projetos e tem mais "
"funcionalidades."

#: Nim-for-Python-Programmers.md:block 445 (unordered list)
msgid "https://nim-lang.github.io/Nim/testament.html **(Recommended)**"
msgstr "https://nim-lang.github.io/Nim/testament.html ** (Recomendado) **"

#: Nim-for-Python-Programmers.md:block 446 (header)
msgid "Docstrings"
msgstr "Docstrings"

#: Nim-for-Python-Programmers.md:block 447 (paragraph)
msgid ""
"Docstrings in Nim are ReSTructuredText *and* MarkDown comments starting with "
"`##`. ReSTructuredText and MarkDown can be mixed together if you want."
msgstr ""
"Docstrings em Nim são comentários reStructuredText *e* MarkDown começando com "
"`##`. ReStructuredText e MarkDown podem ser misturados, se você quiser."

#: Nim-for-Python-Programmers.md:block 448 (paragraph)
msgid ""
"Generate HTML, Latex (PDF) and JSON documentation from source code with `nim doc "
"file.nim`."
msgstr ""
"Gere documentação HTML, Latex (PDF) e JSON a partir do código-fonte com `nim doc "
"file.nim`."

#: Nim-for-Python-Programmers.md:block 449 (paragraph)
msgid ""
"Nim can generate a dependency graph DOT `.dot` file with `nim genDepend file.nim`."
msgstr ""
"O Nim pode gerar um gráfico de dependência DOT `.dot` com `nim genDepend file."
"nim`."

#: Nim-for-Python-Programmers.md:block 454 (header)
msgid "Optional Indentation"
msgstr "Indentação opcional"

#: Nim-for-Python-Programmers.md:block 455 (paragraph)
msgid ""
"You can write constructs like `if..then` and `try..except..finally` on a single "
"line without errors or warnings; indentation is optional. Obviously, this is only "
"a good idea if the snippet is short and simple."
msgstr ""
"Você pode escrever construções como `if.. then` e `try.. except.. finally` em uma "
"única linha sem erros ou avisos; a indentação é opcional. Obviamente, isso só é "
"uma boa ideia se o trecho for curto e simples."

#: Nim-for-Python-Programmers.md:block 457 (header)
msgid "CamelCase"
msgstr "CamelCase"

#: Nim-for-Python-Programmers.md:block 458 (unordered list)
msgid "Why is Nim CamelCase instead of snake_case?."
msgstr "Por que Nim CamelCase em vez de snake_case?"

#: Nim-for-Python-Programmers.md:block 459 (paragraph)
msgid "It really isn't, Nim is style-agnostic!"
msgstr "Realmente não é, Nim é independente de estilo!"

#: Nim-for-Python-Programmers.md:block 461 (paragraph)
msgid ""
"**This feature allows Nim to seamlessly interoperate with a lot of programming "
"languages with different casing styles.**"
msgstr ""
"**Esse recurso permite que o Nim interopere perfeitamente com várias linguagens "
"de programação com diferentes estilos de nomeação. **"

#: Nim-for-Python-Programmers.md:block 462 (paragraph)
msgid ""
"For more homogeneous code you can enforce a default casing style using the "
"compiler command `--styleCheck:hint`. Nim will *style check* your code before "
"compilation, similar to `pycodestyle` in Python. If you want even more strict "
"styling you can use `--styleCheck:error`."
msgstr ""
"Para obter um código mais homogêneo, você pode aplicar um estilo de caixa padrão "
"usando o comando do compilador `—styleCheck:hint`. Nim *verificará o estilo* do "
"seu código antes da compilação, semelhante ao `pycodestyle` em Python. Se você "
"quiser um estilo ainda mais rígido, você pode usar `—styleCheck:error`."

#: Nim-for-Python-Programmers.md:block 463 (paragraph)
msgid "Nim comes with a builtin code auto-formatter named Nimpretty."
msgstr ""
"O Nim vem com um formatador automático de código embutido chamado Nimpretty."

#: Nim-for-Python-Programmers.md:block 464 (paragraph)
msgid ""
"A lot of programming languages have some kind of case-insensitivity, such as: "
"PowerShell, SQL, PHP, Lisp, Assembly, Batch, ABAP, Ada, Visual Basic, VB.NET, "
"Fortran, Pascal, Forth, Cobol, Scheme, Red, Rebol."
msgstr ""
"Muitas linguagens de programação não diferenciam maiúsculas e minúsculas, como: "
"PowerShell, SQL, PHP, Lisp, Assembly, Batch, ABAP, Ada, Visual Basic, VB.NET, "
"Fortran, Pascal, Forth, Cobol, Scheme, Red, Rebol."

#: Nim-for-Python-Programmers.md:block 465 (paragraph)
msgid ""
"If you are just starting from scratch, you can use Python-like names while "
"learning. It will not produce an error unless you tell the compiler you want that."
msgstr ""
"Se você está começando do zero, pode usar nomes semelhantes aos do Python "
"enquanto aprende. Isso não produzirá um erro, a menos que você diga ao compilador "
"que deseja isso."

#: Nim-for-Python-Programmers.md:block 466 (header)
msgid "def vs proc/func"
msgstr "def x proc/func"

#: Nim-for-Python-Programmers.md:block 467 (unordered list)
msgid "Why doesn't Nim use `def` instead of `proc`?."
msgstr "Por que Nim não usa `def` em vez de `proc`?."

#: Nim-for-Python-Programmers.md:block 468 (paragraph)
msgid "Nim uses `proc` for normal functions, which is short for \"procedure\"."
msgstr "Nim usa `proc` para funções normais, que é a abreviação de “procedimento”."

#: Nim-for-Python-Programmers.md:block 469 (paragraph)
msgid ""
"Use `func` for when your routine cannot and should not access global or thread-"
"local variables (see also: [pure functions](https://en.wikipedia.org/wiki/"
"Pure_function))."
msgstr ""
"Use `func` para quando sua rotina não puder e não deve acessar variáveis globais "
"ou locais de thread (veja também: [funções puras](https://en.wikipedia.org/wiki/"
"Pure_function))."

#: Nim-for-Python-Programmers.md:block 470 (paragraph)
msgid ""
"[Nim has side-effects tracking.](https://nim-lang.github.io/Nim/manual."
"html#procedures-func)"
msgstr ""
"[Nim tem rastreamento de efeitos colaterais.](https://nim-lang.github.io/Nim/"
"manual.html#procedures-func)"

#: Nim-for-Python-Programmers.md:block 471 (paragraph)
msgid ""
"You can not use `echo` inside `func`, because `echo` mutates `stdout`, which is a "
"side-effect. Use `debugEcho` instead."
msgstr ""
"Você não pode usar `echo` dentro de `func`, porque `echo` muda `stdout`, o que é "
"um efeito colateral. Em vez disso, use `debugEcho`."

#: Nim-for-Python-Programmers.md:block 473 (unordered list)
msgid ""
"[Strict Func](https://nim-lang.github.io/Nim/manual_experimental.html#strict-"
"funcs)"
msgstr ""
"[Func restrito](https://nim-lang.github.io/Nim/manual_experimental.html#strict-"
"funcs)"

#: Nim-for-Python-Programmers.md:block 473 (unordered list)
msgid "[Write Tracking for Nim](https://nim-lang.org/araq/writetracking_2.html)"
msgstr ""
"[Rastreamento de gravação para Nim](https://nim-lang.org/araq/writetracking_2."
"html)"

#: Nim-for-Python-Programmers.md:block 474 (paragraph)
msgid ""
"If you are just starting from scratch, you can use `proc` for all the functions "
"while learning. It will not produce an error for doing so."
msgstr ""
"Se você está começando do zero, você pode usar `proc` para todas as funções "
"enquanto aprende. Isso não dará um erro."

#: Nim-for-Python-Programmers.md:block 476 (paragraph)
msgid ""
"Nim has had async built-in for a long time. It works as you may expect with "
"`async`, `await`, `Future`, etc."
msgstr ""
"O Nim tem a assíncrona embutida há muito tempo. Funciona como você pode esperar "
"com `async`, `await`, `Future`, etc."

#: Nim-for-Python-Programmers.md:block 477 (paragraph)
msgid ""
"[asyncdispatch](https://nim-lang.org/docs/asyncdispatch.html) is a module to "
"write concurrent code using the `async`/`await` syntax."
msgstr ""
"[asyncdispatch](https://nim-lang.org/docs/asyncdispatch.html) é um módulo para "
"escrever código simultâneo usando a sintaxe `async`/`await`."

#: Nim-for-Python-Programmers.md:block 478 (paragraph)
msgid "`Future` is a type (like a Future in Python, or a Promise in JavaScript)."
msgstr ""
"`Future` é um tipo (como uma Future em Python ou uma Promise em JavaScript)."

#: Nim-for-Python-Programmers.md:block 479 (paragraph)
msgid ""
"`{.async.}` is a pragma that converts functions to async (like `async def` in "
"Python)."
msgstr ""
"`{.async.}` é um pragma que converte funções em assíncronas (como `async def` em "
"Python)."

#: Nim-for-Python-Programmers.md:block 480 (paragraph)
msgid "Let's convert the official Python asyncio *Hello World* to Nim:"
msgstr "Vamos converter o asyncio oficial do Python *Hello World* para Nim:"

#: Nim-for-Python-Programmers.md:block 484 (paragraph)
msgid ""
"Internally async is implemented using metaprogramming (macros, templates, "
"pragmas, etc)."
msgstr ""
"A assíncrona interna é implementada usando metaprogramação (macros, modelos, "
"pragmas, etc.)."

#: Nim-for-Python-Programmers.md:block 485 (table)
msgid "Description"
msgstr "Descrição"

#: Nim-for-Python-Programmers.md:block 485 (table)
msgid ""
"[asyncCheck](https://nim-lang.org/docs/asyncfutures."
"html#asyncCheck%2CFuture%5BT%5D)"
msgstr ""
"[AsyncCheck](https://nim-lang.org/docs/asyncfutures."
"html#asyncCheck%2CFuture%5BT%5D)"

#: Nim-for-Python-Programmers.md:block 485 (table)
msgid ""
"[waitFor](https://nim-lang.org/docs/asyncdispatch.html#waitFor%2CFuture%5BT%5D)"
msgstr ""
"[waitFor](https://nim-lang.org/docs/asyncdispatch.html#waitFor%2CFuture%5BT%5D)"

#: Nim-for-Python-Programmers.md:block 485 (table)
msgid "[await](https://nim-lang.org/docs/asyncdispatch.html#await%2CT)"
msgstr "[await](https://nim-lang.org/docs/asyncdispatch.html#await%2CT)"

#: Nim-for-Python-Programmers.md:block 485 (table)
msgid "Waits for the Future to complete"
msgstr "Espera que a Future seja concluída"

#: Nim-for-Python-Programmers.md:block 485 (table)
msgid "Ignores the Future"
msgstr "Ignora a Future"

#: Nim-for-Python-Programmers.md:block 485 (table)
msgid "Returns result inside Future"
msgstr "Retorna o resultado da Future"

#: Nim-for-Python-Programmers.md:block 485 (table)
msgid "Only available inside async"
msgstr "Disponível apenas dentro do async"

#: Nim-for-Python-Programmers.md:block 486 (unordered list)
msgid "Why doesn't Nim use `async def`?."
msgstr "Por que Nim não usa `async def`?."

#: Nim-for-Python-Programmers.md:block 487 (paragraph)
msgid ""
"Async is just a `macro` in Nim, no need to change the syntax of the language. It "
"is like a decorator in Python, only more powerful."
msgstr ""
"Async é apenas uma `macro` em Nim, sem necessidade de alterar a sintaxe da "
"linguagem. É como um decorador em Python, só que mais poderoso."

#: Nim-for-Python-Programmers.md:block 488 (paragraph)
msgid ""
"Also in Nim the same function can be asynchronous *and* synchronous at the same "
"time, with the same code, with the same name."
msgstr ""
"Também no Nim, a mesma função pode ser assíncrona *e* síncrona ao mesmo tempo, "
"com o mesmo código, com o mesmo nome."

#: Nim-for-Python-Programmers.md:block 489 (paragraph)
msgid ""
"In Python when you have a library *\"foo\"*, you may need both `foo` (sync) and "
"`aiofoo` (async), which are usually completely different projects, repos, "
"developers and APIs. This is not needed in Nim, or rarely seen, thanks to said "
"feature."
msgstr ""
"Em Python, quando você tem uma biblioteca *\"foo\"*, você pode precisar de `foo` "
"(sync) e `aiofoo` (async), que geralmente estão em projetos, repositórios, "
"desenvolvedores e APIs completamente diferentes. Isso não é necessário no Nim, ou "
"raramente visto, graças a esse recurso."

#: Nim-for-Python-Programmers.md:block 490 (paragraph)
msgid ""
"[Because async is just a `macro` in Nim you can create your own async your way "
"too.](https://github.com/disruptek/cps#why)"
msgstr ""
"[Como o async é apenas uma `macro` no Nim, você também pode criar seu próprio "
"assíncrono do seu jeito.](https://github.com/disruptek/cps#why)"

#: Nim-for-Python-Programmers.md:block 491 (paragraph)
msgid ""
"See also [asyncfile](https://nim-lang.org/docs/asyncfile.html), [asyncnet]"
"(https://nim-lang.org/docs/asyncnet.html), [asyncstreams](https://nim-lang.org/"
"docs/asyncstreams.html), [asyncftpclient](https://nim-lang.org/docs/"
"asyncftpclient.html), [asyncfutures](https://nim-lang.org/docs/asyncfutures.html)."
msgstr ""
"Veja também [asyncfile](https://nim-lang.org/docs/asyncfile.html), [asyncnet]"
"(https://nim-lang.org/docs/asyncnet.html), [asyncstreams](https://nim-lang.org/"
"docs/asyncstreams.html), [asyncftpclient](https://nim-lang.org/docs/"
"asyncftpclient.html), [asyncfutures](https://nim-lang.org/docs/asyncfutures.html)."

#: Nim-for-Python-Programmers.md:block 492 (header)
msgid "Do I have to know C?"
msgstr "Eu tenho que saber C?"

#: Nim-for-Python-Programmers.md:block 493 (paragraph)
msgid ""
"You never have to actually manually edit C, the same way in Python you never "
"manually edit the .pyc files."
msgstr ""
"Você nunca precisa realmente editar manualmente o C, da mesma forma que no Python "
"você nunca edita manualmente os arquivos .pyc."

#: Nim-for-Python-Programmers.md:block 494 (paragraph)
msgid ""
"In Nim you code by writing Nim, the same way in Python you code by writing Python."
msgstr ""
"No Nim, você codifica escrevendo Nim, da mesma forma que em Python você codifica "
"escrevendo Python."

#: Nim-for-Python-Programmers.md:block 495 (header)
msgid "Templates"
msgstr "Modelos (Templates)"

#: Nim-for-Python-Programmers.md:block 496 (paragraph)
msgid "A template replaces its invocation with the template body at compile-time."
msgstr ""
"Um modelo substitui sua invocação pelo corpo do modelo em tempo de compilação."

#: Nim-for-Python-Programmers.md:block 497 (paragraph)
msgid "Essentially, **the compiler will copy and paste a chunk of code for you**."
msgstr ""
"Essencialmente, **o compilador copiará e colará um pedaço de código para você**."

#: Nim-for-Python-Programmers.md:block 498 (paragraph)
msgid ""
"A template allows us to have a function-like constructs without any overhead, or "
"to split huge functions into smaller parts."
msgstr ""
"Um modelo nos permite ter construções semelhantes a uma função sem qualquer "
"sobrecarga ou dividir funções enormes em partes menores."

#: Nim-for-Python-Programmers.md:block 499 (paragraph)
msgid ""
"Too many function and variable names may pollute the local namespace. Variables "
"inside templates do not exist outside of their template. Templates do not exist "
"in the namespace at run-time (if you do not export them), Templates may optimize "
"certain values if they are known at compile-time."
msgstr ""
"Muitos nomes de funções e variáveis podem poluir o namespace local. As variáveis "
"dentro dos modelos não existem fora do modelo. Os modelos não existem no "
"namespace em tempo de execução (se você não os exportar). Os modelos podem "
"otimizar determinados valores se forem conhecidos em tempo de compilação."

#: Nim-for-Python-Programmers.md:block 500 (paragraph)
msgid ""
"Templates *cannot* do `import` nor `export` of libraries automatically "
"implicitly. Templates do *not* \"auto-import\" symbols used inside itself. If you "
"use any imported library on the body of a template, you must import that library "
"when invoking that template."
msgstr ""
"Os templates *não* podem `importar` nem `exportar` de bibliotecas automaticamente "
"implicitamente. Os modelos *não* “importam automaticamente” símbolos usados "
"dentro de si mesmos. Se você usar qualquer biblioteca importada no corpo de um "
"modelo, deverá importar essa biblioteca ao invocar esse modelo."

#: Nim-for-Python-Programmers.md:block 501 (paragraph)
msgid ""
"Inside templates you can not use `return` because a template is not a function."
msgstr ""
"Dentro dos modelos, você não pode usar `return` porque um modelo não é uma função."

#: Nim-for-Python-Programmers.md:block 502 (paragraph)
msgid ""
"Templates allow you to implement very high-level, beautiful APIs for everyday "
"usage, while keeping the low-level optimized details out of your head and [DRY]"
"(https://en.wikipedia.org/wiki/Don%27t_repeat_yourself)."
msgstr ""
"Os modelos permitem que você implemente APIs bonitas e de alto nível para o uso "
"diário, mantendo os detalhes otimizados de baixo nível fora de sua cabeça e [DRY]"
"(https://en.wikipedia.org/wiki/Don%27t_repeat_yourself)."

#: Nim-for-Python-Programmers.md:block 503 (paragraph)
msgid ""
"Python `with open(\"file.txt\", mode = \"r\") as file:` implemented using a "
"template:"
msgstr ""
"Python `with open (” file.txt “, mode = “r”) as file:` implementado usando um "
"modelo:"

#: Nim-for-Python-Programmers.md:block 504 (paragraph)
msgid ""
"[![Template explanation animation](https://raw.githubusercontent.com/"
"juancarlospaco/nim-presentation-slides/master/templates.gif \"Template "
"explanation animation\")](https://github.com/juancarlospaco/nim-presentation-"
"slides/blob/master/templates.xcf)"
msgstr ""
"[![Animação explicativa do modelo](https://raw.githubusercontent.com/"
"juancarlospaco/nim-presentation-slides/master/templates.gif “Animação explicativa "
"do modelo”)](https://github.com/juancarlospaco/nim-presentation-slides/blob/"
"master/templates.xcf)"

#: Nim-for-Python-Programmers.md:block 505 (paragraph)
msgid "The GIF is not perfect, but a lazy simplified approximation!"
msgstr "O GIF não é perfeito, mas uma aproximação preguiçosa e simplificada!"

#: Nim-for-Python-Programmers.md:block 506 (paragraph)
msgid "This is not the way to read files in Nim, just an exercise."
msgstr "Essa não é a maneira de ler arquivos no Nim, apenas um exercício."

#: Nim-for-Python-Programmers.md:block 507 (paragraph)
msgid ""
"This template is not perfect, but a lazy approximation. It is an exercise for the "
"reader to try to improve it ;P"
msgstr ""
"Este modelo não é perfeito, mas uma aproximação preguiçosa. É um exercício para o "
"leitor tentar melhorá-lo ;P"

#: Nim-for-Python-Programmers.md:block 509 (paragraph)
msgid ""
"If you are just starting from scratch, do not worry, you can use functions for "
"everything while learning."
msgstr ""
"Se você está começando do zero, não se preocupe, você pode usar funções para tudo "
"enquanto aprende."

#: Nim-for-Python-Programmers.md:block 510 (header)
msgid "How to share variables between functions?"
msgstr "Como compartilhar variáveis entre funções?"

#: Nim-for-Python-Programmers.md:block 511 (paragraph)
msgid "Sharing variables between functions is similar to Python."
msgstr "O compartilhamento de variáveis entre funções é semelhante ao Python."

#: Nim-for-Python-Programmers.md:block 512 (paragraph)
msgid "**Global variable:**"
msgstr "**Variável global: **"

#: Nim-for-Python-Programmers.md:block 516 (paragraph)
msgid "**Object Attribute:**"
msgstr "**Atributo do objeto: **"

#: Nim-for-Python-Programmers.md:block 520 (paragraph)
msgid ""
"You can pass functions as arguments to other functions like in Python. Functions "
"(procs) are first class objects."
msgstr ""
"Você pode passar funções como argumentos para outras funções, como em Python. "
"Funções (procs) são objetos de primeira classe."

#: Nim-for-Python-Programmers.md:block 521 (header)
msgid "In-Place vs Out-Place"
msgstr "In-Place x Out-Place"

#: Nim-for-Python-Programmers.md:block 522 (paragraph)
msgid ""
"If you are migrating from an interpreted language, like Python or JavaScript, you "
"may find strange mentions of \"In-Place\" and \"Out-Place\" somewhere in Nim. If "
"you don't know what it means then Nim looks like it has duplicated functions."
msgstr ""
"Se você estiver migrando de uma linguagem interpretada, como Python ou "
"JavaScript, você pode encontrar menções estranhas de “In-Place” e “Out-Place” em "
"algum lugar de Nim. Se você não sabe o que isso significa, parece que o Nim tem "
"funções duplicadas."

#: Nim-for-Python-Programmers.md:block 523 (paragraph)
msgid ""
"Python allocates a new string or object when something in it changes somehow. "
"Let's say you have a huge string in a variable and you want to change a single "
"character. Since Python strings are immutable, the only solution is to duplicate "
"the string in memory but with the new copy having that character changed. "
"Returning a new copy is an \"Out-Place\" operation. Most of Python works like "
"this."
msgstr ""
"O Python aloca uma nova string ou objeto quando algo nele muda de alguma forma. "
"Digamos que você tenha uma sequência enorme em uma variável e queira alterar um "
"único caractere. Como as cadeias de caracteres do Python são imutáveis, a única "
"solução é duplicar a string na memória, mas com a nova cópia tendo esse caractere "
"alterado. Devolver uma nova cópia é uma operação “Out-Place”. A maior parte do "
"Python funciona assim."

#: Nim-for-Python-Programmers.md:block 524 (paragraph)
msgid ""
"On the other hand, Nim's strings are mutable. In Nim you can change only the "
"character you want to change, rather than copying the string in memory. Some "
"functions work in-place, some functions work on a new copy. The documentation "
"will (usually) which."
msgstr ""
"Por outro lado, as strings de Nim são mutáveis. No Nim, você pode alterar apenas "
"o caractere que deseja alterar, em vez de copiar a string na memória. Algumas "
"funções funcionam no local, outras funcionam em uma nova cópia. A documentação "
"(geralmente) será qual."

#: Nim-for-Python-Programmers.md:block 525 (paragraph)
msgid ""
"[using `macro` Nim can turn from an in-place function to out-place one.](https://"
"nim-lang.github.io/Nim/sugar.html#dup.m%2CT%2Cvarargs%5Buntyped%5D)"
msgstr ""
"[usando `macro`, o Nim pode passar de uma função in-place para uma out-place.]"
"(https://nim-lang.github.io/Nim/sugar.html#dup.m%2CT%2Cvarargs%5Buntyped%5D)"

#: Nim-for-Python-Programmers.md:block 526 (paragraph)
msgid ""
"Nim stdlib modules designed for the JavaScript target usually work on a new copy. "
"This is just how the JavaScript target is; there is no in-place API nor benefits "
"from using it."
msgstr ""
"Os módulos Nim stdlib projetados para o destino JavaScript geralmente funcionam "
"em uma nova cópia. É assim que o destino do JavaScript é; não há API local nem "
"benefícios em usá-la."

#: Nim-for-Python-Programmers.md:block 527 (paragraph)
msgid ""
"Some Nim stdlib modules that work on a new copy may or may not be changed to work "
"in-place in the future."
msgstr ""
"Alguns módulos Nim stdlib que funcionam em uma nova cópia podem ou não ser "
"alterados para funcionar no local no futuro."

#: Nim-for-Python-Programmers.md:block 528 (paragraph)
msgid "Examples:"
msgstr "Exemplos:"

#: Nim-for-Python-Programmers.md:block 530 (header)
msgid "Import Nim files in Python"
msgstr "Importar arquivos Nim em Python"

#: Nim-for-Python-Programmers.md:block 531 (unordered list)
msgid "https://github.com/Pebaz/nimporter#nimporter"
msgstr "https://github.com/Pebaz/nimporter#nimporter"

#: Nim-for-Python-Programmers.md:block 532 (header)
msgid "Python Syntax for Nim"
msgstr "Sintaxe Python para Nim"

#: Nim-for-Python-Programmers.md:block 533 (unordered list)
msgid "https://github.com/Yardanico/nimpylib#nimpylib"
msgstr "https://github.com/Yardanico/nimpylib#nimpylib"

#: Nim-for-Python-Programmers.md:block 534 (header)
msgid "Publish to PYPI"
msgstr "Publicar no PYPI"

#: Nim-for-Python-Programmers.md:block 535 (unordered list)
msgid "https://github.com/yglukhov/nimpy/wiki#publish-to-pypi"
msgstr "https://github.com/yglukhov/nimpy/wiki#publish-to-pypi"

#: Nim-for-Python-Programmers.md:block 535 (unordered list)
msgid ""
"https://github.com/sstadick/ponim/blob/master/README.md#nim--python--poetry--"
msgstr ""
"https://github.com/sstadick/ponim/blob/master/README.md#nim--python--poetry —"

#: Nim-for-Python-Programmers.md:block 535 (unordered list)
msgid "https://github.com/sstadick/nython#nython"
msgstr "https://github.com/sstadick/nython#nython"

#: Nim-for-Python-Programmers.md:block 536 (header)
msgid "Silent Compilation"
msgstr "Compilação silenciosa"

#: Nim-for-Python-Programmers.md:block 537 (paragraph)
msgid ""
"If you want the compilation to be completely silent (you may miss important "
"warnings and hints), you can add to the compile command `--hints:off --"
"verbosity:0`."
msgstr ""
"Se você quiser que a compilação fique completamente silenciosa (você pode perder "
"avisos e dicas importantes), você pode adicionar ao comando de compilação `—hints:"
"off —verbosity:0`."

#: Nim-for-Python-Programmers.md:block 538 (header)
msgid "Compiler Help"
msgstr "Ajuda do compilador"

#: Nim-for-Python-Programmers.md:block 539 (paragraph)
msgid ""
"The compiler help is long. To make it more user friendly only the most frequent "
"commands are shown with `--help`. If you want to see the full help you can use `--"
"fullhelp`."
msgstr ""
"A ajuda do compilador é longa. Para torná-lo mais fácil de usar, apenas os "
"comandos mais frequentes são mostrados com `—help`. Se você quiser ver a ajuda "
"completa, você pode usar `—fullhelp`."

#: Nim-for-Python-Programmers.md:block 540 (header)
msgid "Build Modes"
msgstr "Modos de construção"

#: Nim-for-Python-Programmers.md:block 541 (paragraph)
msgid ""
"When your code is ready for production you should use a Release build, you can "
"add to the compile command `-d:release`."
msgstr ""
"Quando seu código estiver pronto para produção, você deve usar uma compilação "
"Release, você pode adicionar ao comando de compilação `-d:release`."

#: Nim-for-Python-Programmers.md:block 542 (table)
msgid "Release Build"
msgstr "Versão de compilação"

#: Nim-for-Python-Programmers.md:block 542 (table)
msgid "Debug Build"
msgstr "Compilação de depuração"

#: Nim-for-Python-Programmers.md:block 542 (table)
msgid "Speed"
msgstr "Rapidez"

#: Nim-for-Python-Programmers.md:block 542 (table)
msgid "Fast"
msgstr "Rápido"

#: Nim-for-Python-Programmers.md:block 542 (table)
msgid "Slow"
msgstr "Lento"

#: Nim-for-Python-Programmers.md:block 542 (table)
msgid "File Size"
msgstr "Tamanho do arquivo"

#: Nim-for-Python-Programmers.md:block 542 (table)
msgid "Small"
msgstr "Pequeno"

#: Nim-for-Python-Programmers.md:block 542 (table)
msgid "Big"
msgstr "Grande"

#: Nim-for-Python-Programmers.md:block 542 (table)
msgid "Optimized"
msgstr "Otimizado"

#: Nim-for-Python-Programmers.md:block 542 (table)
msgid "Tracebacks"
msgstr "Tracebacks (Pilhas de Rastreamento)"

#: Nim-for-Python-Programmers.md:block 542 (table)
msgid "Run-time checks"
msgstr "Verificações em tempo de execução"

#: Nim-for-Python-Programmers.md:block 542 (table)
msgid "Compile-time checks"
msgstr "Verificações em tempo de compilação"

#: Nim-for-Python-Programmers.md:block 542 (table)
msgid "`assert`"
msgstr "`assert`"

#: Nim-for-Python-Programmers.md:block 542 (table)
msgid ""
"[`doAssert`](https://nim-lang.org/docs/assertions.html#doAssert."
"t%2Cuntyped%2Cstring)"
msgstr ""
"[`doAssert`](https://nim-lang.org/docs/assertions.html#doAssert."
"t%2Cuntyped%2Cstring)"

#: Nim-for-Python-Programmers.md:block 543 (header)
msgid "MicroPython"
msgstr "MicroPython"

#: Nim-for-Python-Programmers.md:block 544 (paragraph)
msgid "Nim compiles to C, so it can run on Arduino and similar hardware."
msgstr ""
"O Nim compila em C, para que possa ser executado no Arduino e em hardware similar."

#: Nim-for-Python-Programmers.md:block 545 (paragraph)
msgid ""
"Has several memory management strategies to fit your needs, including full manual "
"memory management. Nim binaries are small when built for Release and it can fit "
"the hardware tiny storage."
msgstr ""
"Tem várias estratégias de gerenciamento de memória para atender às suas "
"necessidades, incluindo gerenciamento manual completo da memória. Os binários Nim "
"são pequenos quando construídos para o Release e podem caber no pequeno "
"armazenamento do hardware."

#: Nim-for-Python-Programmers.md:block 546 (unordered list)
msgid "https://github.com/zevv/nim-arduino"
msgstr "https://github.com/zevv/nim-arduino"

#: Nim-for-Python-Programmers.md:block 546 (unordered list)
msgid "https://github.com/elcritch/nesper#example-code"
msgstr "https://github.com/elcritch/nesper#example-code"

#: Nim-for-Python-Programmers.md:block 546 (unordered list)
msgid ""
"https://gitlab.com/endes123321/nimcdl/tree/master#nimcdl-nim-circuit-design-"
"language"
msgstr ""
"https://gitlab.com/endes123321/nimcdl/tree/master#nimcdl-nim-circuit-design-"
"language"

#: Nim-for-Python-Programmers.md:block 546 (unordered list)
msgid "https://github.com/cfvescovo/Arduino-Nim#arduino-nim"
msgstr "https://github.com/cfvescovo/Arduino-Nim#arduino-nim"

#: Nim-for-Python-Programmers.md:block 546 (unordered list)
msgid "https://gitlab.com/nimbed/nimbed#nimbed"
msgstr "https://gitlab.com/nimbed/nimbed#nimbed"

#: Nim-for-Python-Programmers.md:block 546 (unordered list)
msgid ""
"https://gitlab.com/endes123321/led-controller-frontend#led-controller-frontend"
msgstr ""
"https://gitlab.com/endes123321/led-controller-frontend#led-controller-frontend"

#: Nim-for-Python-Programmers.md:block 546 (unordered list)
msgid "https://gitlab.com/jalexander8717/msp430f5510-nim"
msgstr "https://gitlab.com/jalexander8717/msp430f5510-nim"

#: Nim-for-Python-Programmers.md:block 546 (unordered list)
msgid "https://github.com/mwbrown/nim_stm32f3"
msgstr "https://github.com/mwbrown/nim_stm32f3"

#: Nim-for-Python-Programmers.md:block 546 (unordered list)
msgid "https://github.com/gokr/ardunimo"
msgstr "https://github.com/gokr/ardunimo"

#: Nim-for-Python-Programmers.md:block 546 (unordered list)
msgid "https://gitlab.com/NetaLabTek/Arduimesp"
msgstr "https://gitlab.com/NetaLabTek/Arduimesp"

#: Nim-for-Python-Programmers.md:block 546 (unordered list)
msgid "https://ftp.heanet.ie/mirrors/fosdem-video/2020/AW1.125/nimoneverything.webm"
msgstr ""
"https://ftp.heanet.ie/mirrors/fosdem-video/2020/AW1.125/nimoneverything.webm"

#: Nim-for-Python-Programmers.md:block 547 (header)
msgid "SuperCollider"
msgstr "SuperCollider"

#: Nim-for-Python-Programmers.md:block 548 (paragraph)
msgid "SuperCollider is C++ so it can be re-utilized using Nim."
msgstr "O SuperCollider é C++, então ele pode ser reutilizado usando o Nim."

#: Nim-for-Python-Programmers.md:block 549 (paragraph)
msgid ""
"Theoretically, Nim SuperCollider plugins should be just as fast as C code. Nim's "
"metaprogramming allows us to build LiveCoding friendly DSLs."
msgstr ""
"Teoricamente, os plug-ins do Nim SuperCollider devem ser tão rápidos quanto o "
"código C. A metaprogramação de Nim nos permite criar DSLs compatíveis com "
"LiveCoding."

#: Nim-for-Python-Programmers.md:block 550 (paragraph)
msgid "Some projects for Nim LiveCoding:"
msgstr "Alguns projetos para o Nim LiveCoding:"

#: Nim-for-Python-Programmers.md:block 551 (unordered list)
msgid "https://github.com/vitreo12/omni#omni"
msgstr "https://github.com/vitreo12/omni#omni"

#: Nim-for-Python-Programmers.md:block 551 (unordered list)
msgid ""
"https://github.com/capocasa/scnim#scnim---writing-supercollider-ugens-using-nim"
msgstr ""
"https://github.com/capocasa/scnim#scnim---writing-supercollider-ugens-using-nim"

#: Nim-for-Python-Programmers.md:block 552 (header)
msgid "ABC"
msgstr "ABC"

#: Nim-for-Python-Programmers.md:block 553 (paragraph)
msgid "See [this](http://rosettacode.org/wiki/Abstract_type#Nim)"
msgstr "Veja [isso](http://rosettacode.org/wiki/Abstract_type#Nim)"

#: Nim-for-Python-Programmers.md:block 554 (header)
msgid "Philosophy"
msgstr "Filosofia"

#: Nim-for-Python-Programmers.md:block 555 (paragraph)
msgid ""
"The key to understanding Nim is that Nim was designed to be as fast as C, but to "
"be much safer. Many of the design decisions are based on making it harder to "
"shoot yourself in the foot. In Python, there are no pointers (everything is "
"treated as a reference). While Nim does give you pointers, Nim gives you other, "
"safer tools for your everyday needs, while pointers are mostly reserved for "
"interfacing with C and doing low-level system programming."
msgstr ""
"A chave para entender o Nim é que o Nim foi projetado para ser tão rápido quanto "
"C, mas para ser muito mais seguro. Muitas das decisões de design são baseadas em "
"tornar mais difícil dar um tiro no próprio pé. Em Python, não há ponteiros (tudo "
"é tratado como referência). Enquanto o Nim fornece dicas, o Nim oferece outras "
"ferramentas mais seguras para suas necessidades diárias, enquanto os ponteiros "
"são principalmente reservados para a interface com C e a programação de sistemas "
"de baixo nível."

#: Nim-for-Python-Programmers.md:block 556 (paragraph)
msgid ""
"Contrarily to Python, most Nim code can be executed at compile time to perform "
"meta-programming. You can do a lot of the DSLs possible with Python decorators/"
"metaprogramming with Nim macros and pragmas. (And some stuff that you can't!). Of "
"course, this requires some different patterns and more type safety."
msgstr ""
"Ao contrário do Python, a maior parte do código Nim pode ser executada em tempo "
"de compilação para realizar metaprogramação. Você pode fazer muitas das DSLs "
"possíveis com decoradores/metaprogramação Python com macros e pragmas Nim. (E "
"algumas coisas que você não pode!). Obviamente, isso requer alguns padrões "
"diferentes e mais segurança de tipos."

#: Nim-for-Python-Programmers.md:block 557 (paragraph)
msgid ""
"[ :arrow_up: :arrow_up: :arrow_up: :arrow_up: ](#table-of-contents \"Go to top\")"
msgstr ""
"[ :arrow_up: :arrow_up: :arrow_up: :arrow_up: ](#table-of-contents \"Ir para o "
"topo\")"
